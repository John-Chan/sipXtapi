Required Software
====================

sipXportLib 2.5.0
  http://www.sipfoundry.org/sipXportLib

sipXtackLib 2.5.0
  http://www.sipfoundry.org/sipXtack

sipXcommserverLib 2.5.0
  http://www.sipfoundry.org/sipXcommserverLib

Java SDK 1.4.2 (tested w/1.4.2.03)
  http://java.sun.com

postgres 7.3.X (tested with 7.3.4)
  http://www.postgresql.org/

Jboss 2.4.X with Tomcat (tested with JBoss-2.4.10_Tomcat-4.0.6)
  http://www.jboss.org

Ant 1.6 (tested with 1.6.1)
  http://ant.apache.org/
  
JUnit 3.8 (tested with 3.8.1)
  http://www.junit.org


Optional Software
====================

SOAP Lite Perl (tested with 0.55)
  http://search.cpan.org
  NOTE: When installing, warnings about MIME::Lite and MIME::Parser do
        not have any impact when running the example scripts


Environment Variables
============================

After installing these packages, set the following environment
variables:

 JAVA_HOME
 JBOSS_HOME - where you unzipped Jboss + "/jboss"
 TOMCAT_HOME - where you unzipped Jboss + "/catalina"
 ANT_HOME

copy JUnit's junit.jar into ${ANT_HOME}/lib


Installation
=====================

  ./configure
  ant
  ant install 

or

  ./configure
  make
  make install 


Setup Postgresql Database
=============================

1.) Initialize postgres. 

 a.) If you have never started postgres, start it
now to initialize default database settings. On redhat systems:

  service postgresql start

 b.) Now shut it down as follows

  service postgresql stop

optionally or on other systems, this will also initialize the database

    mkdir -p /var/lib/pgsql/data
    chown postgres /var/lib/pgsql/data
    su postgres
    initdb --pgdata

2.) Setup security permissions. Edit file: 

  /var/lib/pgsql/data/pg_hba.conf

 a.) uncomment following lines

  local   all         all                                             trust
  host    all         all         127.0.0.1         255.255.255.255   trust

 b.) comment out following line

  #local  all     all             ident   sameuser


3.) Enable TCP/IP connections. Edit file:

   /var/lib/pgsql/data/postgresql.conf

 a.) uncomment and edit this line

   tcpip_socket = true

4.) Create postmaster file for tcp/ip communications to postgres

   echo "-i" > /var/lib/pgsql/data/postmaster.opts.default
   chmod 664 /var/lib/pgsql/data/postmaster.opts.default
   chown postgres /var/lib/pgsql/data/postmaster.opts.default

5.) Now you can start up postgres, must me root user

General Linux Systems :

  /usr/bin/pg_ctl -D /var/lib/pgsql/data start

Redhat:
  service postgresql start

  ...and for Redhat users this may be a goodtime to configure postgres
to start when the system starts up

  chkconfig postgresql on

6.) Create database user

   createuser -U postgres sipxchange

sipxchange user will need access to create databases, but not add more
users.

7.) Create database

   cd /usr/local/share/sipxpbx/sql
   createdb -U sipxchange --encoding=UNICODE PDS
   psql -U sipxchange -f profilegen_create.sql PDS
   psql -U sipxchange -f profilegen_alter.sql PDS
   psql -U sipxchange -f profilegen_seq.sql PDS
   psql -U sipxchange -f profilegen_initvalues.sql PDS

   createdb -U sipxchange --encoding=UNICODE SDS
   psql -U sipxchange -f profilepub_create.sql SDS
   psql -U sipxchange -f profilepub_alter.sql SDS
   psql -U sipxchange -f profilepub_seq.sql SDS


Setup JBOSS and Tomcat
====================

1.) Edit file security setup file:

    ${JBOSS_HOME}/conf/catalina/auth.conf

 a.) Remove "other" section and add the following:

  other {
      com.pingtel.pds.jbossauth.SIPxchangeLoginModule required dsJndiName="java:/PDSDataSource";
  };

2.) Edit file resource setup file:

    ${JBOSS_HOME}/conf/catalina/jboss.jcml

 a.) change JDBC driver from Hypersonic to Postgres. In follwing element:

  <mbean code="org.jboss.jdbc.JdbcProvider" name="DefaultDomain:service=JdbcProvider">

change child elemennt from this:

     <attribute name="Drivers">org.hsqldb.jdbcDriver</attribute>

to this:

     <attribute name="Drivers">org.postgresql.Driver</attribute>


 b.) replace Hypersonic and XADataSourceLoader sections with this:

Remove sections starting with these xml elements:

   <mbean code="org.jboss.jdbc.HypersonicDatabase"...

and
   <mbean code="org.jboss.jdbc.XADataSourceLoader" ...

and add this

  <mbean code="org.jboss.jdbc.XADataSourceLoader" name="DefaultDomain:service=XADataSource,name=PDSDataSource">
    <attribute name="PoolName">PDSDataSource</attribute>
    <attribute name="DataSourceClass">org.jboss.pool.jdbc.xa.wrapper.XADataSourceImpl</attribute>
    <attribute name="Properties"></attribute>
    <attribute name="URL">jdbc:postgresql://localhost/PDS</attribute>
    <attribute name="GCMinIdleTime">1200000</attribute>
    <attribute name="JDBCUser">postgres</attribute>
    <attribute name="MaxSize">10</attribute>
    <attribute name="Password"></attribute>
    <attribute name="GCEnabled">false</attribute>
    <attribute name="InvalidateOnError">false</attribute>
    <attribute name="TimestampUsed">false</attribute>
    <attribute name="Blocking">true</attribute>
    <attribute name="GCInterval">120000</attribute>
    <attribute name="IdleTimeout">1800000</attribute>
    <attribute name="IdleTimeoutEnabled">false</attribute>
    <attribute name="LoggingEnabled">false</attribute>
    <attribute name="MaxIdleTimeoutPercent">1.0</attribute>
    <attribute name="MinSize">0</attribute>
  </mbean>

NOTE: Following components were installed into JBOSS's installation as
part of this project's 'make install':

  - Postgres JDBC driver
  - sipxconfig's authentication jar
  - sipXconfig's EAR file

3.) Ownership - change the ownership of JBoss files to user that will
be running sipxchange.

  chown -R sipxchange:sipxchange /usr/local/jboss

4.) Jboss/Tomcat Security Policy.  Edit this file

  ${JBOSS_HOME}/conf/catalina/jboss.properties

and add these items

  java.security.manager=java.lang.SecurityManager
  java.security.policy=/usr/local/etc/sipxpbx/security.policy
  pds.debug=false

5.) Optional. If JBoss runs out of memory, try editing this file

  ${JBOSS_HOME}/bin/run.sh

And and JVM argument "-mx256m" to the java command line. This line
should look similiar to this one:

   java $HOTSPOT -mx256m $JAXP -classpath $JBOSS_CLASSPATH org.jboss.Main $@


Securing SSL connections
========================

You should replace these demo files with your company's real files

/usr/local/etc/sipxpbx/server.key  - private key
/usr/local/etc/sipxpbx/server.crt  - certificate for that host


If you have not done this, you can add the demo certificate authority
used to create these demo files to the local installed Java virtual
machine by running the following command. This assumes JAVA_HOME
environment variable points to your local Java installation.

${JAVA_HOME}/bin/keytool -import -keystore ${JAVA_HOME}/jre/lib/security/cacerts -alias snakeoil -file sipXcommserverLib/etc/snakeoil-cacert.pem

The default password should be "changeit".  You will want to type
'yes' when prompted to trust this certificate.

This is not a secure system and you must resolve this issue before
using your system is used in any production environement.  You can
remove the demo certificate authority from the Java virtual machine by
running the following command:

${JAVA_HOME}/bin/keytool -delete -keystore ${JAVA_HOME}/jre/lib/security/cacerts -alias snakeoil

Type the following command to list all certificate authorities to
ensure you've remove the Snakeoil CA

${JAVA_HOME}/bin/keytool -list -keystore ${JAVA_HOME}/jre/lib/security/cacerts


Apache Server
====================

Add this line to the bottom of your apache conf file. This may very
depending on how Apache2 was installed. Possible locations include:

  /usr/local/apache2/conf/httpd.conf
  /etc/apache2/conf/apache2.conf

add this line:

  Include /usr/local/www/conf/httpd-sipxchange-configserver-pw.conf


Optional SOAP Access
====================

A SOAP API is available to automate adding/deleting and limited editing of
phone configuration information.  In particular user lines, devices
and credentials.  

A SOAP client perl script is provided as an example and as a useful
importing utility. See following directory for scripts and examples:

  profilegeneration/soap/bin
