#! /usr/bin/perl

use CGI qw/:standard/;
use XML::Parser;

$registration_file = $ARGV[0] || '/var/sipxdata/sipdb/registration.xml';

# Read and parse the registrations file.
$parser = new XML::Parser(Style => 'Tree');
$tree = $parser->parsefile($registration_file);

# Extract the information about the registrations.
my @registrations;
if ($tree->[0] eq 'items') {
    my $c = $tree->[1];
    my $i;
    $timestamp = $c->[0]->{'timestamp'};
    for ($i = 1; $i < $#$c; $i += 2) {
	if ($c->[$i] eq 'item') {
	    my($d) = $c->[$i+1];
            my($i);
	    # Create the hash to contain the information about this
	    # registration.
	    my($registration) = {};
	    for ($i = 1; $i < $#$d; $i += 2) {
                $e = $d->[$i];
                $f = $d->[$i+1];
                if ($e eq 'callid') {
		    $registration->{'callid'} = &text($f);
                } elsif ($e eq 'cseq') {
                    $registration->{'cseq'} = &text($f);
                } elsif ($e eq 'uri') {
                    $registration->{'AOR'} = &text($f);
                } elsif ($e eq 'contact') {
                    $registration->{'contact'} = &text($f);
                } elsif ($e eq 'qvalue') {
                    $registration->{'q'} = &text($f);
                } elsif ($e eq 'expires') {
                    $registration->{'expires'} = &text($f) - $timestamp;
                } elsif ($e eq 'instance_id') {
                    $registration->{'instance_id'} = &text($f);
                } elsif ($e eq 'gruu') {
                    $registration->{'gruu'} = &text($f);
		}
	    }
	    # Add to the array of registrations.
	    push(@registrations, $registration);
        }
    }
} else {
    # Crash if the registrations file is unparsable.
    exit 1;
}

# Generate the table body in order by extension.
$table_body = '';
foreach $registration (sort registration_cmp @registrations) {
    # Ignore registrations that have expired.
    if ($registration->{'expires'} > 0) {
	$table_body .= 
	    Tr(td([
		   escapeHTML($registration->{'AOR'}),
		   escapeHTML($registration->{'contact'}),
		   escapeHTML($registration->{'q'}),
		   escapeHTML($registration->{'expires'}),
		   escapeHTML($registration->{'instance_id'}),
		   escapeHTML($registration->{'gruu'}),
		   escapeHTML($registration->{'callid'}),
		   escapeHTML($registration->{'cseq'})
		   ])) . "\n"
	       }
}

# Start the HTML.
print header,
    start_html('Registrations'), "\n",
    h1('Registrations'), "\n";

# Beware that <tr> is generated by the Tr() function, because tr is a
# keyword.
print table({-border => 1, -align => 'left'},
	    Tr(th([
		   'AOR',
		   'Contact',
		   'q',
		   'Expires',
		   'Instance ID',
		   'GRUU',
		   'Call-Id',
		   'CSeq'
		   ])), "\n",
	    $table_body);

print end_html,
    "\n";

exit 0;

# Extract the (top-level) text content from an XML tree.
sub text {
    my($tree) = @_;
    my($text) = '';
    my $i;
    for ($i = 1; $i < $#$tree; $i += 2) {
	if (${$tree}[$i] eq '0') {
	    $text .= ${$tree}[$i+1];
        }
    }
    return $text;
}

# Function to compare two registration hashes.
sub registration_cmp {
    # Extract the AOR fields and from them extract the extension number.
    my($a_ext) = $a->{'AOR'} =~ /sip:(\d+)\@/;
    my($b_ext) = $b->{'AOR'} =~ /sip:(\d+)\@/;
    # Compare the extensions numerically.
    return $a_ext <=> $b_ext;
}
