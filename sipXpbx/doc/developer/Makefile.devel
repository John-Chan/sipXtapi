# Makefile for doing various tasks to build and install sipX.

# When running command groups, the value of the PREFIX variable will
# be passed to any ./configure as "--prefix=$(PREFIX)".
# Remember to set PREFIX to the same value on all later builds, or
# edit its default value below.

# The sipX sources can be fetched using 'checkout' command group.
# If you want a specific branch or tag, set the BRANCH variable.

# The command groups to help configure an installed sipX have been
# moved to Makefile.config (which is built from Makefile.config.in),
# so that they can be substituted with the correct locations for the
# config files.

# So to do a complete build and install of sipX, you can do:
#    # Create the top directory of the working copy.
#    mkdir working-copy
#    cd working-copy
#    # Check out the source from the repository.
#    make -f [some copy of Makefile.devel somewhere] checkout
#    # Build and install the software.
#    make -f sipXpbx/doc/developer/Makefile.devel build-check-install

# This file assumes that all of the auxiliary open-source packages have been
# installed in their ordinary (system) locations.  If not, you may
# have to adjust some of the following variable assignments, or add
# "with" arguments for ./configure to the CONFIGURE_FLAGS variable.
CONFIGURE_FLAGS=

# If the $(PREFIX)/lib/httpd/modules directory exists, use it as the Apache
# modules directory.
ifneq ($(PREFIX),)
ifneq ($(wildcard $(PREFIX)/lib/httpd/modules),)
CONFIGURE_FLAGS+=--with-apache-modules=$(PREFIX)/lib/httpd/modules
endif
endif

# Environment variables used by some of the components
export ANT_HOME=/opt/apache-ant-1.6.2
export JAVA_HOME=/usr/java/j2sdk1.4.2_03
export JBOSS_HOME=/opt/jboss-4.0.0
export SPRING_HOME=/opt/spring-framework-1.1.2

# A list of all the sipX components, in the dependency order that they have
# to be built in.
# For the full dependency order, see http://www.sipfoundry.org/sipX/index.html
COMPONENTS=sipXportLib sipXtackLib sipXmediaLib \
	sipXmediaAdapterLib sipXcallLib \
	sipXcommserverLib sipXvxml sipXconfig sipXregistry sipXproxy \
	sipXpublisher sipXpbx

# The Subversion repository from which the source will be fetched by
# 'checkout'.
# Use https: access so that changes can be checked back in.
REPOSITORY=https://scm.sipfoundry.org/rep

# Environment variables for global configuration
# Example:
# Turn off compiler optimization.  Put in debugging information.
#export CFLAGS=-O0 -g
#export CXXFLAGS=-O0 -g

# Environment variable to set the user who will own the installed files.
# Default to the current user.
export SIPXPBXUSER=${USER}

# $PREFIX is the directory into which the software will be installed.
PREFIX=
# $(PREFIX_ARG) is the --prefix argument to ./configure, if any,
ifeq ($(PREFIX),)
    PREFIX_ARG=
else
    PREFIX_ARG=--prefix=$(PREFIX)
endif

# Define $SUDO as the prefix to commands that runs any necessary sudo, etc.
# needed for installing files.
SUDO=
# Example: If you need to use 'sudo':
#SUDO=sudo

.PHONY: checkout update status status-u showversions build build-install \
	build-check-install build-only rpms \
	$(COMPONENTS)

# Build all the components

build build-check-install: $(foreach C,$(COMPONENTS),$(C)-build-check-install)

# Command groups to perform various Subversion activities.

# Check out all the components
# The branch identifier to check out, e.g., "main", "branch/2.6",
# "tag/2.6.001b", etc.
BRANCH=main
checkout:
	svn checkout --quiet $(REPOSITORY)/$(BRANCH) sipX

# "svn switch" all the components
# The branch identifier to switch to is specified by BRANCH.  (See above.)
switch:
	for d in $(COMPONENTS) ; \
	    do echo svn switch $(REPOSITORY)/$$d/$(BRANCH) $$d ; \
	    svn switch $(REPOSITORY)/$$d/$(BRANCH) $$d ; \
	done

# Update all the components (that are already checked out)
update:
	svn update

# Show the status of all the components
status:
	svn status | \
	grep -Ev '^$$|^Performing status on external item at |^X      '
status-u:
	svn status -u | \
	grep -Ev '^$$|^Performing status on external item at |^X      '

# Clean all the components.
distclean:
	for d in $(COMPONENTS) ; do if [ -f $$d/Makefile ] ; then make -C $$d distclean ; fi ; done

# Print the svnversion info for all the components.
svnversion:
	svnversion .

# Print the differences from the BASE revision.
diff:
	svn diff

# Command groups to build each component

$(foreach C,$(COMPONENTS),$(C)): %: %-build-check-install

$(foreach C,$(COMPONENTS),$(C)-build-check-install): %-build-check-install: %
	cd $< ; autoreconf --install --force
	cd $< ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd $< ; make
	cd $< ; make check
	cd $< ; $(SUDO) make install

#$(COMPONENTS): %:
#	cd $@ ; autoreconf --install --force
#	cd $@ ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
#	cd $@ ; make
#	cd $@ ; make check
#	cd $@ ; $(SUDO) make install
	
# The rpm --install's install both the binary and the devel RPMs of
# the libraries.

# Where rpmbuild will do its work.
RPMBUILD_TOPDIR = $(shell rpm --eval '%{_topdir}')
rpms:
	cd sipXportLib ; make rpm
	sudo rpm --install -p $(RPMBUILD_TOPDIR)/RPMS/i386/sipxportlib-*.i386.rpm
	cd sipXtackLib ; make rpm
	sudo rpm --install -p $(RPMBUILD_TOPDIR)/RPMS/i386/sipxtacklib-*.i386.rpm
	cd sipXmediaLib ; make rpm
	sudo rpm --install -p $(RPMBUILD_TOPDIR)/RPMS/i386/sipxmedialib-*.i386.rpm
	cd sipXmediaAdapterLib ; make rpm
	sudo rpm --install -p $(RPMBUILD_TOPDIR)/RPMS/i386/sipxmediaadapterlib-*.i386.rpm
	cd sipXcallLib ; make rpm
	sudo rpm --install -p $(RPMBUILD_TOPDIR)/RPMS/i386/sipxcalllib-*.i386.rpm
	cd sipXcommserverLib ; make rpm
	sudo rpm --install -p $(RPMBUILD_TOPDIR)/RPMS/i386/sipxcommserverlib-*.i386.rpm
	cd sipXvxml ; make rpm
	sudo rpm --install -p $(RPMBUILD_TOPDIR)/RPMS/i386/sipxvxml-*.i386.rpm
	cd sipXconfig ; make rpm
	cd sipXregistry ; make rpm
	cd sipXproxy ; make rpm
	cd sipXpublisher ; make rpm
	cd sipXpbx ; make rpm

# Build and test the software, but do not install it.
# (Which may not work if the installed libraries are too different from the
# current code, since the links will be done against the installed libraries,
# not the ones built during this process!)
# (This should be factored better, as it duplicates the above entries.)
build-check:
	cd sipXportLib ; autoreconf --install --force
	cd sipXportLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXportLib ; make
	cd sipXportLib ; make check
	cd sipXtackLib ; autoreconf --install --force
	cd sipXtackLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXtackLib ; make
	cd sipXtackLib ; make check
	cd sipXmediaLib ; autoreconf --install --force
	cd sipXmediaLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXmediaLib ; make
	cd sipXmediaLib ; make check
	cd sipXmediaAdapterLib ; autoreconf --install --force
	cd sipXmediaAdapterLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXmediaAdapterLib ; make
	cd sipXmediaAdapterLib ; make check
	cd sipXcallLib ; autoreconf --install --force
	cd sipXcallLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXcallLib ; make
	cd sipXcallLib ; make check
	cd sipXcommserverLib ; autoreconf --install --force
	cd sipXcommserverLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXcommserverLib ; make
	cd sipXcommserverLib ; make check
	cd sipXvxml ; autoreconf --install --force
	cd sipXvxml ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXvxml ; make
	cd sipXconfig ; autoreconf --install --force
	cd sipXconfig ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXconfig ; make
	cd sipXregistry ; autoreconf --install --force
	cd sipXregistry ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXregistry ; make
	cd sipXproxy ; autoreconf --install --force
	cd sipXproxy ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXproxy ; make
	cd sipXpublisher ; autoreconf --install --force
	cd sipXpublisher ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXpublisher ; make
	cd sipXpbx ; autoreconf --install --force
	cd sipXpbx ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXpbx ; make

# Build and install the software, but do not test it.
# (This should be factored better, as it duplicates the above entries.)
build-install:
	cd sipXportLib ; autoreconf --install --force
	cd sipXportLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXportLib ; make
	cd sipXportLib ; $(SUDO) make install
	cd sipXtackLib ; autoreconf --install --force
	cd sipXtackLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXtackLib ; make
	cd sipXtackLib ; $(SUDO) make install
	cd sipXmediaLib ; autoreconf --install --force
	cd sipXmediaLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXmediaLib ; make
	cd sipXmediaLib ; $(SUDO) make install
	cd sipXmediaAdapterLib ; autoreconf --install --force
	cd sipXmediaAdapterLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXmediaAdapterLib ; make
	cd sipXmediaAdapterLib ; $(SUDO) make install
	cd sipXcallLib ; autoreconf --install --force
	cd sipXcallLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXcallLib ; make
	cd sipXcallLib ; $(SUDO) make install
	cd sipXcommserverLib ; autoreconf --install --force
	cd sipXcommserverLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXcommserverLib ; make
	cd sipXcommserverLib ; $(SUDO) make install
	cd sipXvxml ; autoreconf --install --force
	cd sipXvxml ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXvxml ; make
	cd sipXvxml ; $(SUDO) make install
	cd sipXconfig ; autoreconf --install --force
	cd sipXconfig ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXconfig ; make
	cd sipXconfig ; $(SUDO) make install
	cd sipXregistry ; autoreconf --install --force
	cd sipXregistry ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXregistry ; make
	cd sipXregistry ; $(SUDO) make install
	cd sipXproxy ; autoreconf --install --force
	cd sipXproxy ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXproxy ; make
	cd sipXproxy ; $(SUDO) make install
	cd sipXpublisher ; autoreconf --install --force
	cd sipXpublisher ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXpublisher ; make
	cd sipXpublisher ; $(SUDO) make install
	cd sipXpbx ; autoreconf --install --force
	cd sipXpbx ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXpbx ; make
	cd sipXpbx ; $(SUDO) make install

build-only:
	cd sipXportLib ; autoreconf --install --force
	cd sipXportLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXportLib ; make
	cd sipXtackLib ; autoreconf --install --force
	cd sipXtackLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXtackLib ; make
	cd sipXmediaLib ; autoreconf --install --force
	cd sipXmediaLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXmediaLib ; make
	cd sipXmediaAdapterLib ; autoreconf --install --force
	cd sipXmediaAdapterLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXmediaAdapterLib ; make
	cd sipXcallLib ; autoreconf --install --force
	cd sipXcallLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXcallLib ; make
	cd sipXcommserverLib ; autoreconf --install --force
	cd sipXcommserverLib ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXcommserverLib ; make
	cd sipXvxml ; autoreconf --install --force
	cd sipXvxml ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXvxml ; make
	cd sipXconfig ; autoreconf --install --force
	cd sipXconfig ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXconfig ; make
	cd sipXregistry ; autoreconf --install --force
	cd sipXregistry ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXregistry ; make
	cd sipXproxy ; autoreconf --install --force
	cd sipXproxy ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXproxy ; make
	cd sipXpublisher ; autoreconf --install --force
	cd sipXpublisher ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXpublisher ; make
	cd sipXpbx ; autoreconf --install --force
	cd sipXpbx ; ./configure $(CONFIGURE_FLAGS) $(PREFIX_ARG)
	cd sipXpbx ; make

make-install:
	cd sipXportLib ; make
	cd sipXportLib ; $(SUDO) make install
	cd sipXtackLib ; make
	cd sipXtackLib ; $(SUDO) make install
	cd sipXmediaLib ; make
	cd sipXmediaLib ; $(SUDO) make install
	cd sipXmediaAdapterLib ; make
	cd sipXmediaAdapterLib ; $(SUDO) make install
	cd sipXcallLib ; make
	cd sipXcallLib ; $(SUDO) make install
	cd sipXcommserverLib ; make
	cd sipXcommserverLib ; $(SUDO) make install
	cd sipXvxml ; make
	cd sipXvxml ; $(SUDO) make install
	cd sipXconfig ; make
	cd sipXconfig ; $(SUDO) make install
	cd sipXregistry ; make
	cd sipXregistry ; $(SUDO) make install
	cd sipXproxy ; make
	cd sipXproxy ; $(SUDO) make install
	cd sipXpublisher ; make
	cd sipXpublisher ; $(SUDO) make install
	cd sipXpbx ; make
	cd sipXpbx ; $(SUDO) make install

install:
	cd sipXportLib ; $(SUDO) make install
	cd sipXtackLib ; $(SUDO) make install
	cd sipXmediaLib ; $(SUDO) make install
	cd sipXmediaAdapterLib ; $(SUDO) make install
	cd sipXcallLib ; $(SUDO) make install
	cd sipXcommserverLib ; $(SUDO) make install
	cd sipXvxml ; $(SUDO) make install
	cd sipXconfig ; $(SUDO) make install
	cd sipXregistry ; $(SUDO) make install
	cd sipXproxy ; $(SUDO) make install
	cd sipXpublisher ; $(SUDO) make install
	cd sipXpbx ; $(SUDO) make install

# Command groups to test the code base for various violations of the
# coding standards.

# Check that the rules for tabs have not been violated
# The complex 'find' selects the files within which we want to enforce the 
# ban on tabs.  The '-prune -false -o -type f' construction prevents
# recursion into directories of specified names, but also restricts the
# output of the find to ordinary files.  The long list of -name's before
# it is the list of directory names that will not be examined.
# The next list of -name's specify which files will not be examined.
# The first xargs ... grep selects files containing at least one tab.
# (The construction "$$'\t'" is a way to specify a tab (in bash) without
# using one.)  The second xargs ... grep removes files with a SpeechWorks
# copyright, as they are part of VXI.  The final grep is to produce a
# correct exit code, as grep --files-without-match doesn't exit 0/1
# based on whether any file names are output or not.
enforce-tabs:
	! find sipXregistry sipXvxml \
		\( \( -name .svn -o \
			-name jsi -o \
			-name VXI -o \
			-name js -o \
			-name meta -o \
			-name doc -o \
			-name config -o \
			-name autom4te.cache \) -prune -false -o -type f \) \
		! \( -name 'Makefile*' -o \
			-name '*.o' -o \
			-name '*.lo' -o \
			-name '*.so' -o \
			-name '*.so.[0-9]*' -o \
			-name '*.a' -o \
			-name '*.class' -o \
			-name '*.jar' -o \
			-name '*.gif' -o \
			-name COPYING -o \
			-name LICENSE -o \
			-name aclocal.m4 -o \
			-name configure -o \
			-name config.log -o \
			-name config.status -o \
			-name sipXvxml -o \
			-name sipregistrar -o \
			-name libtool \) \
		-print0 | \
	xargs --null grep --null --files-with-matches $$'\t' | \
	xargs --null grep --files-without-match SpeechWorks | \
	grep '.'

# Use a trick to make sure that "NO$(NULL)NE" does not appear in this makefile.
NULL=

# Search for occurrences of NO$(NULL)NE in the makefiles, which indicate an
# incorrect substitution of a configure variable (usually ${prefix}
# for which the user did not give an option to ./configure.
search-NO$(NULL)NE:
	! grep -n NO$(NULL)NE \
		$$( find sipX* -name '.svn' -prune -false -o -name Makefile ) | \
	grep '.'

# Search for un-substituted variables that should have been substituted.
# Currently, only checks for @... variables in the install directory.
search-unsubstituted:
	! grep -rE --binary-files=without-match '@[A-Za-z]+@' /usr/local/sipx | \
	grep '.'

# Copy the Apache modules to $PREFIX/lib/httpd/modules so this sandbox can have
# a custom version.
# Must be executed before configuring and building the software.
# Unfortunately, we have to guess where the modules are installed, since
# this makefile isn't customized by ./configure.
create-local-modules:
	mkdir -p $(PREFIX)/lib/httpd/modules
	cp /usr/lib/httpd/modules/* $(PREFIX)/lib/httpd/modules
