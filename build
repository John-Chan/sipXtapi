#!/bin/bash

## Build each project.  No specific knowledge about
## any project should be listed here. This does a full build
## of all projects, but more importantly this enforces each
## project adheres to the standard set forth

Staging=""
Clean=""
BuildReturn=0
FailFast=NO
Sudo=""
Check=CHECK
Deps=DEPS

# Overrides ../configure commmand line 
# may be added to by the meta/${BuildLabel}.configure-switches file
ConfigureSwitches=""

# Export is nec. to allow projects to use variable in their
# ConfigureSwitchFile
export Destination=""

echo "" > build.err

## Correct build order
ProjectsInOrder() {
    if [ "$Deps" != "NODEPS" ]
    then
        make -f dependencies $* | grep -v "make:"
    else
        echo $*
    fi
}

## All known projects
CommunityProjects="\
   sipXportLib \
   sipXtackLib \
   sipXmediaLib \
   sipXmediaAdapterLib \
   sipXcallLib \
   sipXcommserverLib \
   sipXpublisher \
   sipXregistry \
   sipXproxy \
   sipXconfig \
   sipXvxml \
   sipXpbx
"

## RPMs to be built at this time.
RpmProjects="\
   sipXportLib \
   sipXtackLib \
   sipXmediaLib \
   sipXmediaAdapterLib \
   sipXcallLib \
   sipXcommserverLib \
   sipXpublisher \
   sipXregistry \
   sipXproxy \
   sipXconfig \
   sipXvxml \
   sipXpbx \
"

## In order to build other RPMs, these
## RPMs need to be installed, along with
## their *-devel RPMs.
RpmLibraryProjects="\
    sipXportLib \
    sipXtackLib \
    sipXmediaLib \
    sipXmediaAdapterLib \
    sipXcallLib \
    sipXcommserverLib \
"

## Allow projects to specify custom configure switches.  This is
## not to be abused, projects should not require complex configure switches
## for standard operation for optimal usablity.
setConfigureSwitches()
{
    ConfigureSwitches=""
    UsedLabels=""
    for bl in `echo ${BuildLabel} | sed 's/,/ /g'`
    do
        ConfigureSwitchFile="meta/${bl}.configure-switches"
        if [ -f ${ConfigureSwitchFile} ]
        then
            SwitchExpression=`sed 's/^#.*//' ${ConfigureSwitchFile}`

           ## by evaluating the expression, switches can use variable
           ## from this script file
           ##
           ## Andy: The orginal line was
           ## Switch=`eval "echo $SwitchExpression"`
           ## and that didn't work for me - may have to be put back in
           ## to evaluate variables in the switches
            Switch=$SwitchExpression
            UsedLabels="${UsedLabels} ${bl}"
            # using the echo command forces all the switches onto one line
            ConfigureSwitches="$ConfigureSwitches `echo $Switch`"
        else
            echo "Build label '$bl' not defined - no file '${ConfigureSwitchFile}' found." 1>&2
        fi
    done
    echo "      Using labels:             ${UsedLabels:-(none)}"
    echo "      Using configure switches: ${ConfigureSwitches:-(none)}"
}

## I N C R E M E N T A L
incrementalBuild()
{
    Project=$1
    AllowRetry=$2
    ## echo to stderr to help decipher warnings and errors between projects
    echo "===================== Starting incremental build of $Project" >&2

    Success=false
    echo "Building $Project"
    pushd $Project > /dev/null || return 1

    setConfigureSwitches 

    if autoreconf --install --force
    then
        mkbuilddir build
        cd build > /dev/null
        if ../configure $ConfigureSwitches --prefix $Destination
        then
            if make -s 
            then
                if test $Check != CHECK || make check
                then
                    if $Sudo make -s install
                    then
                        Success=true
                    fi
                fi
            fi
        fi
    fi
    popd > /dev/null

    if test "$Success" = "true"
    then
        echo "SUCCESS : $Project built successfully $UNITCHECK"
        echo ""
        return 0
    else
        builderr "ERROR : $Project failed to build!!!"

    	## Test if we're doing an incremental build and we're in the first try. Don't
    	## set error condition on first try, only after retry.
    	if [ "$AllowRetry" = "allow-retry" ]; then
    	    echo "Not setting error condition on first try" 1>&2
    	else
    	    BuildReturn=-1
    	fi

        echo ""
        return 1
    fi
}

## T A R B A L L S
tarBuild()
{
    Project=$1
    ## echo to stderr to help decipher warnings and errors between projects
    echo "Starting tarball build of $Project" >&2

    Success=false
    echo "Building $Project tarball"
    pushd $Project > /dev/null || return 1

    setConfigureSwitches 

    if autoreconf --force --install
    then
        mkbuilddir build
        cd build > /dev/null
        if ../configure $ConfigureSwitches --prefix $Destination
        then
            if make -s dist
            then
                Success=true
            fi
        fi
    fi
    popd > /dev/null

    if test "$Success" = "true"
    then
        echo "SUCCESS : $Project tarball built successfully $UNITCHECK"
        echo ""
        return 0
    else
        builderr "ERROR : $Project tarball failed to build!!!"
        BuildReturn=-1
        echo ""
        return 1
    fi
}

## D I S T R I B U T I O N
distributionBuild()
{
    Project=$1
    ## echo to stderr to help decipher warnings and errors between projects
    echo "Starting distribution build of $Project" >&2

    Success=false
    echo "Building $Project distribution"
    pushd $Project > /dev/null || return 1

    setConfigureSwitches 

    if autoreconf --force --install
    then
        mkbuilddir build
        cd build > /dev/null
        if ../configure $ConfigureSwitches --prefix $Destination
        then
            if make -s dist
            then

                # extract tarball into staging dir
                TarBall=`find -maxdepth 1 -name "*.tar.gz" -printf "%f\n"`
                TarDir=`echo $TarBall | sed -e 's/.tar.gz//g'`
                tar -xvzf $TarBall --directory=$Staging
    
                # standard make/install
                pushd $Staging/$TarDir > /dev/null
                # override install dir for apache modules to avoid need for sudo
                if ./configure $ConfigureSwitches --prefix $Destination
                then
                    if make -s
                    then
                        if test $Check != CHECK || make check
                        then
                            if $Sudo make -s install
                            then
                                Success=true
                            fi
                        fi
                    fi
                fi
                popd > /dev/null
            fi
        fi
    fi
    popd > /dev/null

    if test "$Success" = "true"
    then
        echo "SUCCESS : $Project built successfully $UNITCHECK"
        echo ""
        return 0
    else
        builderr "ERROR : $Project failed to build!!!"
        BuildReturn=-1
        echo ""
        return 1
    fi
}

# Remove RPM
rpmClean()
{
    Project=$1

    Success=true

    # This is a general rule that should be true. If not may need to maintain
    # legend from project name to rpm package name
    RpmPackage=`echo $Project | tr A-Z a-z`

    for pkg in $RpmPackage{-debug,-debuginfo,-devel,}
    do
       if rpm -q $pkg > /dev/null
       then
           echo "Removing $pkg"
           $Sudo rpm -e --nodeps $pkg
       fi 
    done
}

##  Make and install RPM
rpmBuild()
{
    Project=$1
    ## echo to stderr to help decipher warnings and errors between projects
    echo "Starting RPM build of $Project" >&2

    # This is a general rule that should be true. If not may need to maintain
    # legend from project name to rpm package name
    RpmPackage=`echo $Project | tr A-Z a-z`

    Success=false
    echo "Building $Project RPM"
    pushd $Project > /dev/null || return 1

    setConfigureSwitches

    if [ ! -f SVN-VERSION ]; then
        if [ -d .svn ]; then
            svnversion . \
            | perl -p \
                -e 'm /(\d+)/ && do { $padded=sprintf( "%06d", $1 ); s/\d+/$padded/; }' \
                -e 's/:/./; s/M/.M/;' \
            > SVN-VERSION
        else 
            echo '0.unknown' > SVN-VERSION
        fi
    fi

    if autoreconf --force --install
    then
        mkbuilddir build
        cd build > /dev/null
        if ../configure $ConfigureSwitches
        then
            if make -s rpm
            then
            
                ## Upgrade will install if RPM was not previsously installed
                if [ `echo $RpmLibraryProjects | grep -c $Project` -ne 0 ]
                then 
                    RpmFiles=`ls $RpmPackage*.rpm | grep -v "\.src"`
                    
                    ## Upgrade will install if RPM was not previsously installed
                    if $Sudo rpm -i $RpmFiles
                    then
                        Success=true
                    fi
                else
                    Success=true
                fi
                if [ "$Success" = "true" ]; then
                    if [ "$Check" = "CHECK" ]; then
                        Success=false

                        if make -s
                            then
                            if make check
                            then
                                Success=true
                            fi
                        fi
                    fi
                fi
            fi
        fi
    fi
    popd > /dev/null

    if test "$Success" = "true"
    then
        echo "SUCCESS : $Project built successfully $UNITCHECK"
        echo ""
        return 0
    else
        builderr "ERROR : $Project failed to build!!!"
        BuildReturn=-1
        echo ""
        return 1
    fi
}


## C L E A N
cleanBuild()
{
    echo "Cleaning $Project"
    pushd $1 > /dev/null || return 1
    rm -rf autom4te.cache config.h.in configure aclocal.m4 build
    find -name Makefile.in -exec rm '{}' \;
    popd > /dev/null
}


## Send message to stderr, and log it for reporting at end and
## mark a flag that overall build failed
builderr()
{
    echo "$1" >&2
    echo "$1" >> build.err
    if test x"$FailFast" = xYES
    then
      exit -1
    fi
}


## Makes a directory and optionally clean it
##
mkbuilddir()
{
    if ! test -d $1
    then
        mkdir -p $1
    fi
}

## Optionally load env. specific to building
## Use BUILD_HOME_DIR because sudo's "~/" is not right
RCFILE=${BUILD_HOME_DIR:=~}/.sipxbuildrc
if [ -f $RCFILE ]
then
    source $RCFILE
fi

## Main program loop
Action=INCREMENTAL

while [ "$#" -ne 0 ]
do
    case ${1} in
        -d|--distribution)
        Action=DISTRIBUTION
        ;;

        -t|--tarball)
        Action=TARBALL
        ;;

        -r|--rpm)
        Action=RPM
        ;;

        -c|--clean)
        Action=CLEAN
        ;;

        -rc|--rpmclean)
        Action=RPMCLEAN
        ;;

        -f|--failfast)
        FailFast=YES
        ;;

        -p|--projects)
        shift
        newProjects=`echo ${1} | perl -pe 's|,| |g; s|/| |g'`
        Projects="$Projects $newProjects"
        ;;

        -nc|--no-check)
        Check=NOCHECK
        ;;

        -nd|--no-deps)
        Deps=NODEPS
        ;;

        -x|--exec)
        Action=EXEC
        shift
        break
        ;;

        -s|--sudo)
        Sudo="sudo"
        ;;

        -l|--label)
            shift
            BuildLabel="${BuildLabel},${1}"
        ;;

        -*)
        Action=HELP
        ;;

        *)
        if [ "$Destination"x = ""x ]
        then
            Destination=${1}
        else
            echo "Too many arguments: ${1}"
            Action=HELP
        fi
        ;;
    esac

    shift #always consume 1
done

if [ -z "$Destination" -a -n "$SIPX_INSTALLDIR" ]
then
    Destination=$SIPX_INSTALLDIR
fi

if [ -z "$Projects" ]
then
    case $ACTION in
        RPM*)
            Projects=$RpmProjects
            ;;
        *)
            Projects=$CommunityProjects
            ;;
    esac
else
    if test "$Action" = "CLEAN"
    then
        Deps=NODEPS
    fi
fi

if test $Check = NOCHECK
then
    cat <<EOF
********************************************************************
**** UNIT TESTS ARE DISABLED
**** The results of this build should not be considered suitable for 
****     any production purpose.  
**** Unit tests should always be run before checking in any change!
********************************************************************
EOF
    UNITCHECK="[with unit tests disabled]"
else
    UNITCHECK=""
fi

if test "$Action" = "INCREMENTAL" 
then
    if test -z "$Destination"
    then
        echo "Must specify <destination>" 1>&2
        exit 1
    fi
    mkbuilddir 

    for Project in `ProjectsInOrder $Projects`; 
    do
      if [ -d $Project ]
      then
        if ! incrementalBuild $Project allow-retry
        then
            echo "Clean and retry build of $Project" 1>&2
            echo "Clean and retry build of $Project" >> build.err
            cleanBuild $Project
            incrementalBuild $Project
        fi
      else
          echo "$Project missing (skipped) " 1>&2
          echo "$Project missing (skipped) " >> build.err
      fi
    done

    cat build.err
    exit $BuildReturn
elif test "$Action" = "TARBALL" 
then
    if test -z "$Destination"
    then
        echo "Must specify <destination>" 1>&2
        exit 1
    fi

    mkbuilddir $Destination

    for Project in `ProjectsInOrder $Projects`; do
      if [ -d $Project ]
      then
        tarBuild $Project
      else
          echo "$Project missing (skipped) " 1>&2
          echo "$Project missing (skipped) " >> build.err
      fi
    done

    cat build.err
    exit $BuildReturn
elif test "$Action" = "DISTRIBUTION" 
then
    if test -z "$Destination"
    then
        echo "Must specify <destination>" 1>&2
        exit 1
    fi

    mkbuilddir $Destination
    Staging="$Destination/var/tmp"
    mkbuilddir $Staging

    for Project in `ProjectsInOrder $Projects`; do
      if [ -d $Project ]
      then
        distributionBuild $Project
      else
          echo "$Project missing (skipped) " 1>&2
          echo "$Project missing (skipped) " >> build.err
      fi
    done

    cat build.err
    exit $BuildReturn
elif test "$Action" = "RPM"
then

    for Project in `ProjectsInOrder $Projects`; do
      if [ -d $Project ]
      then
        rpmBuild $Project
      else
          echo "$Project missing (skipped) " 1>&2
          echo "$Project missing (skipped) " >> build.err
      fi
    done

    cat build.err
    exit $BuildReturn
elif test "$Action" = "RPMCLEAN"
then
    # need to reverse because of interproject 
    # dependencies
    Reverse=""
    for Project in `ProjectsInOrder $Projects`; do
        Reverse="$Project $Reverse"
    done

    for Project in $Reverse; do
      if [ -d $Project ]
      then
        rpmClean $Project
      else
          echo "$Project missing (skipped) " 1>&2
          echo "$Project missing (skipped) " >> build.err
      fi
    done


    cat build.err
    exit $BuildReturn
elif test "$Action" = "CLEAN"
then
    for Project in `ProjectsInOrder $Projects`; do
      if [ -d $Project ]
      then
        cleanBuild $Project
      else
          echo "$Project missing (skipped) " 1>&2
          echo "$Project missing (skipped) " >> build.err
      fi
    done
    exit 0
elif test "$Action" = "EXEC"
then
    for Project in `ProjectsInOrder $Projects`; do
      if [ -d $Project ]
      then
        pushd $Project > /dev/null
        "$@"
        popd > /dev/null
      else
          echo "$Project missing (skipped) " 1>&2
          echo "$Project missing (skipped) " >> build.err
      fi
    done
    exit 0
fi

cat <<USAGE

Usage:

        ./build [-d|--distribution] 
                [-c|--clean] 
                [-s|--sudo]
                [-f|--failfast] 
                [-p|--projects {projects}]
                [-nd|--no-deps]
                [-nc|--no-check]
                [-rc|--rpmclean]
                [-x|--exec]
                [-r|--rpm]
                [-l|--label <label> ]...
                [{destination directory}]

Options are:
     none              Incrementally build every project. Must have rw access 
                       to destination directory. destination is required.
                       In an incremental build, if a project build fails, the
                       default action is to clean it and retry the build; it
                       is only considered a failure if this second attempt
                       fails (see --failfast).

     --distribution|-d Calls 'make dist' to builds tarballs and then builds 
                       from those tarballs. 
                       Destination directory is required for configuration 
                       purposes, but no files are installed or modified in that
                       directory.

     --tarball|-t      Calls 'make dist' to build tarballs, but does not build 
                       from them (useful to check whether or not packaging 
                       works but much quicker than --distribution).. 
                       Destination directory is required for configuration 
                       purposes, but no files are installed or modified in that
                       directory.

     --clean|-c        Deletes all output and generated files including
                       files generated by autoconf and automake.  
                       If the --projects option is used to explictly specify
                       a list of projects, then this implies --no-deps.
                       This does *not* delete any installed files.

     --sudo|-s         Sudo when installing packages

     --failfast|-f     Stop after first build error, leaving any remaining projects
                       unbuilt.  In an incremental build, this also disables the
                       automatic clean and retry.

     --projects|-p     Space or comman delimited list of projects to operate on;
                       this option may be specified multiple times.
                       Example: --projects "sipXpbx sipXphone".
                            or  --projects sipXpbx,sipXphone
                            or  -p sipXpbx -p sipXphone
                       If this is not specified, then all available projects
                       are built (the absence of a project causes a warning 
                       on standard error, but is not considered an error).  
                       When building, any dependencies are also built, so 
                       specifying 'sipXtackLib' would automatically
                       also build 'sipXportLib' (to disable, use --no-deps).

     --no-deps|-nd     Build exactly the specified targets; do not build the 
                       projects they depend on.

     --no-check|-nc    Does not run unit tests. 
                       WARNING: If Douglas finds out you didn't run unit tests 
                       before you checked your code in, he's going to put tacks 
                       on your chair.

     --exec|-x         Execute remaining portion of commandline after changing the
                       current directory into the project's root directory. 
                       Examples:
                           build -x pwd | xargs grep -rl SomeString
                           build -x svn status

     --rpm|-r          Build and install RPMs.

     --rpmclean|-rc    Remove RPMs

     --label|-l        Set one or more build labels. The build looks for a 
                       meta/{label}.configure-switches file in each project
                       and uses these switches if the file is found.
                       Multiple labels may be specified by multiple uses of this
                       option (-l foo -l bar) or by using comma (but not space)
                       separated values ( --label foo,bar ).
                       The labels default to the environment variable \$BuildLabel 
                       if it is defined.
USAGE

exit
