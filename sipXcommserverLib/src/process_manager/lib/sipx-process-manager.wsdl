<?xml version="1.0"?>
<definitions
  targetNamespace="urn:ProcessManagerService"
  xmlns:tns="urn:ProcessManagerService"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
  xmlns:soap-enc="http://schemas.xmlsoap.org/soap/encoding/"
  xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:si="http://soapinterop.org/xsd"
  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
  xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/"
  xmlns="http://schemas.xmlsoap.org/wsdl/">

  <types>
    <xsd:schema targetNamespace="urn:ProcessManagerService" xmlns="http://www.w3.org/2000/10/XMLSchema">>

      <xsd:complexType name="ArrayOfString">
        <xsd:restriction base="soap-enc:Array">
          <xsd:attribute ref="soap-enc:arrayType" wsdl:arrayType="xsd:string[]" />
        </xsd:restriction>
      </xsd:complexType>

      <xsd:complexType name="ArrayOfBinary">
        <xsd:restriction base="soap-enc:Array">
          <xsd:attribute ref="soap-enc:arrayType" wsdl:arrayType="xsd:binary[] "/>
        </xsd:restriction>
      </xsd:complexType>

      <xsd:simpleType name="ProcessStatus">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="starting" />
          <xsd:enumeration value="started" />
          <xsd:enumeration value="stopping" />
          <xsd:enumeration value="stopped" />
          <xsd:enumeration value="failed" />
        </xsd:restriction>
      </xsd:simpleType>      

      <xsd:complexType name="NamedProcessStatus">
        <xsd:sequence>
          <xsd:element name="name" type="xsd:string" minOccurs="1" maxOccurs="1" />
          <xsd:element name="status" type="tns:ProcessStatus" minOccurs="1" maxOccurs="1" />
        </xsd:sequence>
      </xsd:complexType>

      <xsd:complexType name="ArrayOfNamedProcessStatus">
        <xsd:sequence>
          <xsd:element name="namedProcessStatus" type="tns:NamedProcessStatus" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:complexType>

      <xsd:simpleType name="SipxDirectory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="data" />           <!-- usually maps to /var/sipxdata/ -->
          <xsd:enumeration value="etc" />            <!-- usually maps to /etc/sipxpbx/ -->
          <xsd:enumeration value="log" />            <!-- usually maps to /var/log/sipxpbx/ -->
          <xsd:enumeration value="tmp" />            <!-- maps to the system temp directory -->        
        </xsd:restriction>
      </xsd:simpleType>

      <xsd:complexType name="SipxFilePath">
        <xsd:sequence>
          <!-- Append the fileRelativePath to the mapped sipX directory to get
               the absolute path to the file -->
          <xsd:element name="sipXdir" type="tns:SipxDirectory" />
          <xsd:element name="fileRelativePath" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>

      <xsd:complexType name="readSipDataInput">
        <xsd:sequence>
          <!-- Name of the sipdb database, e.g., registration, subscription, ... -->
          <xsd:element name="dbName" type="xsd:string" minOccurs="1" maxOccurs="1" />          
        </xsd:sequence>
      </xsd:complexType>

      <xsd:complexType name="readSipDataOutput">
        <xsd:sequence>
          <!-- sipData is a string containing data read from the DB -->
          <xsd:element name="sipData" type="xsd:string" minOccurs="0" maxOccurs="1" />
        </xsd:sequence>
      </xsd:complexType>

      <xsd:complexType name="writeSipDataInput">
        <xsd:sequence>
          <!-- Name of the sipdb database, e.g., registration, subscription, ... -->
          <xsd:element name="dbName" type="xsd:string" minOccurs="1" maxOccurs="1" />          
          <xsd:element name="sipData" type="xsd:string" minOccurs="1" maxOccurs="1" />
        </xsd:sequence>
      </xsd:complexType>

    </xsd:schema>
  </types>

  <message name="manageProcessesRequest">
    <part name="verb" type="xsd:string" />
    <part name="processes" type="tns:ArrayOfString" />
  </message>
  <message name="manageProcessesResponse" />

  <message name="getProcessStatusRequest" />
  <message name="getProcessStatusResponse">
    <part name="getProcessStatusResponse" type="tns:ArrayOfNamedProcessStatus" />
  </message>

  <message name="readFileRequest">
    <part name="readFileRequest" type="tns:SipxFilePath" />
    <part name="attach" type="tns:ArrayOfBinary" />
  </message>    
  <message name="readFileResponse" />

  <message name="writeFileRequest">
    <part name="sipxFilePath" type="tns:SipxFilePath" />
    <part name="attach" type="tns:ArrayOfBinary" />
  </message>    
  <message name="writeFileResponse" />

  <message name="deleteFileRequest">
    <part name="deleteFileRequest" type="tns:SipxFilePath" />
  </message>    
  <message name="deleteFileResponse" />

  <message name="readSipDataRequest">
    <part name="readSipDataRequest" type="tns:readSipDataInput" />
  </message>
  <message name="readSipDataResponse">
    <part name="readSipDataResponse" type="tns:readSipDataOutput" />
  </message>

  <message name="writeSipDataRequest">
    <part name="writeSipDataRequest" type="tns:writeSipDataInput" />
  </message>  
  <message name="writeSipDataResponse" />

  <portType name="ProcessManagerService">

    <operation name="manageProcesses">
      <input message="tns:manageProcessesRequest" />
      <output message="tns:manageProcessesResponse" />
    </operation>

    <operation name="getProcessStatus">
      <input message="tns:getProcessStatusRequest" />
      <output message="tns:getProcessStatusResponse" />
    </operation>

    <operation name="readFile">
      <input message="tns:readFileRequest" />
      <output message="tns:readFileResponse" />
    </operation>

    <operation name="writeFile">
      <input message="tns:writeFileRequest" />
      <output message="tns:writeFileResponse" />
    </operation>

    <operation name="deleteFile">
      <input message="tns:deleteFileRequest" />
      <output message="tns:deleteFileResponse" />
    </operation>

    <operation name="readSipData">
      <input message="tns:readSipDataRequest" />
      <output message="tns:readSipDataResponse" />
    </operation>

    <operation name="writeSipData">
      <input message="tns:writeSipDataRequest" />
      <output message="tns:writeSipDataResponse" />
    </operation>

  </portType>

  <binding name="ProcessManagerBinding" type="tns:ProcessManagerService">
    <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" />

    <operation name="manageProcesses">
      <soap:operation soapAction="urn:ProcessManagerService#manageProcesses" />
      <input>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </input>
      <output>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </output>
    </operation>

    <operation name="getProcessStatus">
      <soap:operation soapAction="urn:ProcessManagerService#getProcessStatus" />
      <input>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </input>
      <output>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </output>
    </operation>

    <!-- The readFile operation uses the "SOAP with Attachments" extension to
         return the file as an attachment.  See
         https://jax-rpc.dev.java.net/whitepaper/1.1.2/attachments.html and
         http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.pmc.express.doc/tasks/tjw_attach_wsdl.html .
     -->
    <operation name="readFile">
      <soap:operation soapAction="urn:ProcessManagerService#readFile" />
      <input>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </input>
      <output>
        <mime:multipartRelated>
          <mime:part>
            <!-- The message has no SOAP parts so we don't need a "parts" attribute here -->
            <soap:body use="encoded" namespace="urn:ProcessManagerService" />
          </mime:part>
          <mime:part>
            <!-- See RFC 2046, "Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types".
                 When reading files, the content could be anything. -->
            <mime:content part="attach" type="application/octet-stream"/>
          </mime:part>
        </mime:multipartRelated>
      </output>
    </operation>

    <operation name="writeFile">
      <soap:operation soapAction="urn:ProcessManagerService#writeFile" />
      <input>
        <mime:multipartRelated>
          <mime:part>
            <soap:body parts="sipxFilePath" use="encoded" namespace="urn:ProcessManagerService" />
          </mime:part>
          <mime:part>
            <!-- See RFC 2046, "Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types".
                 When writing files, the content could be anything. -->
            <mime:content part="attach" type="application/octet-stream"/>
          </mime:part>
        </mime:multipartRelated>
      </input>
      <output>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </output>
    </operation>

    <operation name="deleteFile">
      <soap:operation soapAction="urn:ProcessManagerService#deleteFile" />
      <input>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </input>
      <output>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </output>
    </operation>

    <operation name="readSipData">
      <soap:operation soapAction="urn:ProcessManagerService#readSipData" />
      <input>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </input>
      <output>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </output>
    </operation>

    <operation name="writeSipData">
      <soap:operation soapAction="urn:ProcessManagerService#writeSipData" />
      <input>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </input>
      <output>
        <soap:body use="encoded" namespace="urn:ProcessManagerService" />
      </output>
    </operation>

  </binding>

  <service name="ProcessManagerService">
    <documentation>Process Manager Service</documentation>
    <port name="ProcessManagerService" binding="tns:ProcessManagerBinding">
      <soap:address location="http://localhost:2000/" />
    </port>
  </service>
</definitions>
