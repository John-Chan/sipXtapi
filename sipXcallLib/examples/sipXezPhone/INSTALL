==============================================================================
               I N S T A L L A T I O N   I N S T R U C T I O N S
==============================================================================

This document describes how to build and install sipXezPhone from source.  This
process is somewhat complicated and requires a number of 3rd party software
packages and manual steps.

If you have questions or problems, please consult the latest version of this
document and the sipX dev mailing list.  The sipX-dev mailing list is searchable -
please search before posting your question.

  http://scm.sipfoundry.org/rep/sipX/main/sipXcallLib/examples/sipXezPhone/INSTALL
  http://www.sipfoundry.org/sipXcallLib/
  http://list.sipfoundry.org/mailman/listinfo/sipx-dev

Contents:

  Windows instructions
    Getting the source code
    Installing 3rd party components
    Building C++ code
    Updating environment variables
    Launching the softphone
        Troubleshooting: Build problems
  Linux instructions
  OS X instructions
  Please help!

====================
Windows instructions for MSVS6
====================

The sipXezPhone depends on other SIPFoundry projects:
sipXportLib, sipXtackLib, sipXmediaLib, sipXmeidaAdapterLib and sipXcallLib.
For more information, please see the build and install documentation
for those projects.
Open the sipXportLib.dsp, sipXtackLib.dsp, sipXmediaLib.dsp, sipXmediaAdapterLib.dsp
and sipXcallLib.dsp one at a time, select the Win32 Debug build option and build
each library.  See the sipXportLib/INSTALL file for details on the dependencies for
these sipX libraries.

-------------------------------
Getting the Source Code
-------------------------------
Make a new directory which will be home to your SIPFoundry projects.

For example, create a "c:\sipfoundry" directory.

Using subversion from the command line, get the needed SIPFoundry projects
by running the following from the command line.
For example:
  cd \sipfoundry
  svn checkout http://scm.sipfoundry.org/rep/sipX/main/sipXportLib sipXportLib
  svn checkout http://scm.sipfoundry.org/rep/sipX/main/sipXtackLib sipXtackLib
  svn checkout http://scm.sipfoundry.org/rep/sipX/main/sipXmediaLib sipXmediaLib
  svn checkout http://scm.sipfoundry.org/rep/sipX/main/sipXcallLib sipXcallLib
  
  The sipXezPhone code and the Visual Studio project files are located in the "sipXcallLib\examples\sipXezPhone" directory.


-------------------------------
Installing 3rd party components
-------------------------------

Required Software
-----------------
MSVC    - Microsoft Visual Studio 6.0, be sure to install the latest service pack.
          (or greater).
PCRE    - Perl Compatible Regular Expression Library
wxWidgets - Open-source, platform independent GUI library


Installing PCRE
---------------
Latest tested version: 4.4

You will need the following PCRE packages/files:
  pcre-4.4-bin.exe : PCRE runtime environment
  pcre-4.4-lib.exe : PCRE development package

You can download the directly from gnuwin32 or from SIPfoundry:
  http://gnuwin32.sourceforge.net/packages/pcre.htm
  http://www.sipfoundry.org/pub/sipXphone/depends/win32/

Install both packages.  Order may not matter, however, installating the runtime
environment first is known to work.

Next add the PCRE  paths to your MSVC environment (assuming installation into
C:\Program Files\GnuWin32):


Installing wxWidgets
--------------------
The wxWidgets library can be downloaded from http://www.wxwidgets.org/.
sipXezPhone uses version 2.6.2 of wxWidgets.

By default, unzip the wxWidgets source to the
wxWindows-2.6.2 folder.

NOTE - there is one important post-installation step for installing wxWidgets:
       copy setup.h from \wxWindows-2.6.2\include\wx\msw
                      to \wxWindows-2.6.2\include\wx
                      
Building wxWigets
-----------------
Open the build\msw\wx_dll.dsp
Select the "Wind32 DLL Debug" build option. One at a time select the core, base and adv
projects and build them.

Set up your MSVC6 environment to find the wxWidgets libraries:
Under Tools->options... 
1) add the include directores: wxWidgets-2.6.2\include and wxWidgets-2.6.2\lib\vc_lib\mswd
2) add the library directory: wxWidgets-2.6.2\lib\vc_dll


-----------------
Building C++ Code
-----------------

Open "sipXezPhone.dsp" in MSVC, verify that "Win32 Debug" is the default project
and build.  You should end up building "sipXezPhone.exe", "sipXtapi.dll" and the dependent .libs.

NOTE - there is currently and issue where the projects in the sipXezPhone solution may attempt to build in the
WRONG order!!  If this happens, just build (dont re-build) a second time.  The second pass should build attempt should
succeed.


----------------------------
Adding Environment Variables
----------------------------

At runtime, the softphone needs to be able to find the libglib-2.0-o.dll, and
related dependencies.  Add "c:\glib\bin", or the equivalent to your Windows
PATH environment variable.  From a command prompt, this can be added by
entering the following:
  PATH=%PATH%;c:\glib\bin

-----------------------
Launching the sipXezPhone
-----------------------

After a build, sipXezPhone.exe will be created in the sipXcallLib\examples\sipXezPhone directory.
The working directory for sipXezPhone must have in it the sipXtapi.dll.  Either copy the sipXtapi.dll to
the directory containing sipXezPhone.exe, or point your working directory to sipXtapi's build directory.



-------------------------------
Troubleshooting: Build Problems
-------------------------------

RTTI must be enabled
--------------------
Many of the projects are starting to use the dynamic_cast<>()  mechanism to
provide runtime type checking.  RTTI must be enabled on all projects using
dynamic_cast<>() and related functionality.  By default, almost all of the
sipX WIN32 projects now enable RTTI.

Failing to enable RTTI results in odd crashes/exceptions.  Generally "rtti"
or "RTDynamicCast" is found in stack trace.

wxWidgets Unresolved Externals and MSVC 6.0
--------------------------------------------
If your wxWidgets library was not compiled with the /MT compile flag (multi-threaded),
may experience 'unresoved external' link errors such as:

unresolved external symbol __ftol2

Rebuild wxWidgets with the following command lines
 nmake -f makefile.vc clean FINAL=1
 nmake -f makefile.vc FINAL=1 CRTFLAG=/MD    (for the multithreaded DLL)


 
-------------------------------
Troubleshooting: Runtime Problems
-------------------------------



==================
Linux instructions
==================

Prerequisites:
--------------
Make sure you have the following packages (or similarly named packages,
depending on your distribution) installed:
[Coming soon. Probably similar to the ones for OS X below.]

Compile and install cppunit and wxWidgets, if they are not available as
packages. Otherwise install packaged versions, including development packages.

Compile and install sipXportLib, sipXtackLib, sipXmediaLib, sipXmediaAdapterLib,
and sipXcallLib. As usual, run "autoreconf --install --force" for each, and then
run ./configure. Make sure to use the --enable-tapi option to configure for
sipXtackLib, the --enable-local-audio option to configure for sipXmediaLib, and
the --enable-sipx-ezphone option to configure for sipXcallLib.


=================
OS X instructions
=================

Prerequisites:
--------------
Install Fink, and the following Fink packages:
glib2-dev, pkgconfig, fileutils, libtool, pcre, openssl097-dev, ant

Compile and install cppunit and wxWidgets (wxMac version). A standard tar xzvf,
then "./configure --prefix=/usr/local && make && sudo make install" will do the
trick for both of these.

Follow the Linux instructions to build and install the main sipX packages. You
may need to create a symbolic link named configure.in pointing at configure.ac,
depending on your version of autoconf. ("ln -s configure.ac configure.in")

You cannot directly run the sipXezPhone binary that has been installed! It must
be packaged into an application bundle (a .app) to work correctly. Run the
makeBundle.sh script in this directory, and give it the top-level sipX source
path (i.e. the directory containing sipXportLib, sipXcallLib, etc.) as the first
argument, and the sipX install prefix as the second argument. For instance:

$ ./makeBundle.sh /Users/joeuser/sipfoundry/main /usr/local

It will build a bundle named sipXezPhone.app, and a disk image sipXezPhone.dmg
containing that bundle. You can now run the application by double clicking the
bundle like any other OS X application, or distribute the disk image.

============
Please help!
============

Find a problem in these docs?  Have suggestions ... better yet a patch with
changes?  Please email sipX-dev AT sipfoundry.org or mcohen AT pingtel.com.
