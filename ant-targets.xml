<?xml version="1.0" encoding="UTF-8" ?>
<!--  -->

<!--
  - project file all build.xml's should import
  -
  - NOTES:
  -
  -  Attempts to define targets w/standard target names, but not authorative
  -    standard was used.
  -   
  -  Works for projects that is a composite of subprojects. Limitation, that
  -    composite project can not have it's own src as well
  -
  -->
<project name="ant-targets" default="default" basedir="." >

  <!-- 
    -  P R O P E R T I E S
    -
    - EXTERNAL PROPERTIES DEPENDECIES:
    -  top.build.dir        = top output for all projects
    -  build.dir            = output for project
    -  test.classes         = Patterset of explicit junit tests for quick test
    -  regression.classes   = Patterset of explicit junit tests for full regression test 
    -->
  <property file="${top.build.dir}/config.properties"/>
  <property name="src.dir" value="src" />
  <property name="classes.dir" value="${build.dir}/classes" />
  <property name="dist.dir" value="${build.dir}/dist" />
  <property name="api.dir" value="${top.build.dir}/doc/api/${ant.project.name}" />
  <property name="test.results.dir" value="${build.dir}/test-results" />
  <property name="test.classes.dir" value="${build.dir}/tests"/>

  <!-- 
    - common path unittests will need that interfaces w/neoconf lib 
    - all spring jars at this point
    -->
  <path id="neoconf.runtime.dependencies">
      <pathelement path="${spring.jar}" />
      <pathelement path="${commons-logging.jar}" />
      <pathelement path="${commons-dbcp.jar}" />
      <pathelement path="${commons-pool.jar}" />
      <pathelement path="${aopalliance.jar}" />
      <pathelement path="${dom4j.jar}" />
      <pathelement path="${commons-collections.jar}" />
      <pathelement path="${ehcache.jar}" />
      <pathelement path="${cglib-full.jar}" />
      <pathelement path="${jta.jar}" />
      <pathelement path="${jdbc-driver.jar}" />
  </path>

  <!-- 
    - going forward this default will change to just 'test'
    - until then, projects like neoconf will override this
    -->
  <property name="test.src.dir" value="${src.dir}/test"/>

  <target name="classpath">
    <echo>${classpath}</echo>
  </target>

  <!--
    - T A S K   D E F I N I T I O N S
    - Common task definitions.
    -->
  <taskdef resource="checkstyletask.properties"> 
     <classpath>
        <pathelement location="${checkstyle.jar}"/>

        <!-- 
          - antlr that comes w/ant 1.6 is too old, use local 
          - that came w/checkstyle 
          -->
        <pathelement location="${antlr.jar}"/>

        <pathelement location="${checkstyle-optional.jar}"/>
     </classpath> 
   </taskdef> 


  <!--
    - C L O V E R
    - Unit test coverage tasks and definitions 
  -->
  <!-- Added for Clover testing -->
  <property name="clover.excludes" value=""/>

  <target name="with.clover" description="Enables code coverage instrumentation">
    <taskdef resource="clovertasks"/>
    <mkdir dir="${build.dir}/clover/db"/>
    <mkdir dir="${build.dir}/clover/html"/>
    <clover-setup initString="${build.dir}/clover/db/csdb">
      <files>
        <exclude name="**/*Test.java"/> 
      </files>
  </clover-setup> 
    <property name="clover.html.dir" location="${build.dir}/clover/html"/>
  </target>

  <target name="clover.report" depends="with.clover">
    <clover-report>
      <current outfile="${clover.html.dir}">
        <format type="html"/>
      </current>
    </clover-report>
  </target>

  <target name="clover.viewer" depends="with.clover">
    <clover-view/>
  </target> 
 
  <!--
    - I N I T 
    - Create output directories. 
    -->
  <target name="init" unless="subdirs"
    description="[internal] create standard output directories">
    
    <echo level="verbose">entering ${ant.project.name}</echo>
    <mkdir dir="${build.dir}" />
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${api.dir}" />
    <mkdir dir="${test.results.dir}"/>
    <mkdir dir="${test.classes.dir}"/>
  </target>


  <!-- 
   - P H O N E   C O M P I L E   D E F I N I T I O N S
   - NOTE: Compile is against limited JDK classes, hence the bootclasspath
   - and for ldap, jndi jars in classpath that are now apart of the 
   - standard JDK. This is too keep support for hardphone. This will 
   - still compile against JDK up to version 1.3 but not beyond.
   -->
  <target name="phone-javac" 
        description="[internal]Set javac flags for code for hardphone">

    <!-- presetdef name="javac">
      <javac bootclasspath="${classes.zip}"/>
    </presetdef -->
  </target>


  <!--
    - Creates a standard version file 
    - MUST DEFINE property ${version.file}
    -->
  <target name="version.properties" 
    description="[internal] Generats a properies file w/versioning info">

    <propertyfile file="${version.file}" comment="xpressa build" >
        <entry  key="version"       value="${xpressa.version}" />
        <entry  key="buildNumber"   value="${xpressa.build.number}" />
        <entry  key="built"         value="now"
                type="date"         pattern="MMM dd yyyy HH:mm:ss" />
       <entry  key="optionalComment"  value="${xpressa.build.comment}" />
    </propertyfile>
  </target>


  <!--
    -  D E F A U L T
    -->
  <target name="default" if="subdirs"
      description="recurse w/default target">
    <my.subant/>
  </target>


  <!-- 
   - C O M P I L E 
   -->
  <target name="compile" depends="init" unless="subdirs"
      description="[internal] Compile all files in src directory">

    <javac srcdir="${src.dir}"
        destdir="${classes.dir}"
        classpathref="base.path"
        debug="${debug}"
        deprecation="${deprecation}"
        optimize="${optimize}"
        includes="**/*.java"
  	    excludes="test/**"/>
  </target>


  <!-- C L E A N -->
  <target name="clean" depends="subclean,realclean"/>

  <target name="subclean" if="subdirs"
        description="[internal] recurse w/clean target">
    <my.subant target="clean"/>
  </target>

  <target name="realclean" unless="subdirs"
      description="[internal] remove class, distribution and test directories">

    <delete dir="${classes.dir}"/>
    <delete dir="${test.classes.dir}"/>
    <delete dir="${test.results.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>


  <!-- I N S T A L L -->
  <target name="install" depends="subinstall,realinstall"
       description="Install java components" />

  <target name="subinstall" if="subdirs">
    <my.subant target="install"/>
  </target>

  <target name="realinstall" unless="subdirs"
       description="Install java components" />


  <!-- U N I N S T A L L -->
  <target name="uninstall" depends="subuninstall,realuninstall"
       description="Uninstall java components"/>

  <target name="subuninstall" if="subdirs">
    <my.subant target="install"/>
  </target>

  <target name="realuninstall" unless="subdirs"
       description="Install java components">
    <echo>NOTE: not necessarily a perfect inverse opperation to 'install'</echo>
  </target>

  
  <!-- C O M P I L E  T E S T S -->
  <target name="check.compile.test">
    <available file="${test.src.dir}" type="dir" property="tests.present"/>
  </target>

  <target name="compile.test" depends="check.compile.test,compile,init" if="tests.present" unless="subdirs"
        description="[internal] compile tests">

    <javac srcdir="${test.src.dir}"
       destdir="${test.classes.dir}"
       classpathref="base.path"
       debug="${debug}"
       deprecation="on"
       optimize="${optimize}"
       includes="**">
      <classpath>
        <pathelement path="${classes.dir}"/>
        <pathelement location="${junit.jar}"/>
      </classpath>
    </javac>
  </target>

  <!-- C H E C K S T Y L E -->
  <!-- set checkstyle.severity property to error|warning|info --> 
  <!-- we are only failing on errors --> 
  <target name="style" depends="substyle,realstyle" 
       description="run checkstyle"/>

  <target name="substyle" if="subdirs" 
       description="run checkstyle">
    <my.subant target="style"/>
  </target>

  <target name="check.src.present">
    <available file="${src.dir}" type="dir" property="src.present"/>
  </target>

  <target name="realstyle" depends="check.src.present" if="src.present" unless="subdirs"
      description="checks code convention violations"> 
    <checkstyle config="${top.dir}/meta/checkstyle.xml" failOnViolation="false" 
        failureproperty="checkstyle.failed"> 
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
      <formatter type="xml" toFile="${build.dir}/checkstyle_errors.xml"/> 
    </checkstyle>
    <xslt in="${build.dir}/checkstyle_errors.xml" 
        out="${build.dir}/checkstyle_errors.html" 
        style="${top.dir}/meta/checkstyle-noframes-sorted.xsl"/> 
    <xslt in="${build.dir}/checkstyle_errors.xml"
      out="${build.dir}/checkstyle_errors.txt"
      style="${top.dir}/meta/checkstyle-text.xsl"></xslt> 
    <concat>
      <fileset file="${build.dir}/checkstyle_errors.txt"/>
    </concat>
    <fail if="checkstyle.failed"/> 
  </target> 
	

  <!-- J A V A D O C -->
  <target name="doc" depends="subdoc,realdoc"
      description="generate javadocs for src and test code"/>

  <target name="subdoc" if="subdirs"
      description="[internal] recurse w/given target">
    <my.subant target="doc"/>
  </target>

  <target name="realdoc" depends="init" unless="subdirs"
      description="generate javadocs for src and test code">

    <javadoc sourcepath="${src.dir}" destdir="${api.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
      <classpath refid="base.path"/>
      <classpath path="${junit.jar}"/>	
    </javadoc>
  </target>


  <!--
    - U N I T T E S T 
    -->
  <target name="test" depends="subtest,realtest" 
       description="run junit tests">
  </target> 

  <target name="subtest" if="subdirs" 
       description="run junit tests">
    <my.subant target="test"/>
  </target>

  <target name="realtest" depends="compile.test" unless="subdirs" 
       description="run junit tests">

    <junit fork="yes" haltonfailure="no" printsummary="on" failureproperty="junit.failed">
      <classpath>
        <pathelement location="${clover.jar}"/> 
        <pathelement path="${classpath}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement location="${test.classes.dir}"/>
        <pathelement location="${src.dir}/test"/> 
	<!-- resource files -->
        <pathelement location="${src.dir}"/>
        <pathelement location="${test.src.dir}"/>
      </classpath>
      <formatter type="plain"/>
      <formatter type="xml"/>
      <sysproperty key="basedir" value="${basedir}"/>
      <batchtest todir="${test.results.dir}">
        <fileset dir="${test.classes.dir}"> 
          <patternset refid="test.classes"/>
        </fileset>
      </batchtest>
    </junit>        
    <fail if="junit.failed"/>   
  </target>


  <!--
    - R E G R E S S I O N  U N I T T E S T 
    - This is unittests that generallly take a while to run or
    - require that your machine is setup, for example database, 
    - webserver, etc
    -->
  <target name="regression" depends="subregression,realregression" 
       description="run regression junit tests"/>

  <target name="subregression" if="subdirs" 
       description="run regression junit tests">
    <my.subant target="regression"/>
  </target>

  <target name="realregression" depends="compile.test" unless="subdirs" 
       description="run regression junit tests">

    <junit fork="yes" haltonfailure="yes" printsummary="on">
      <classpath>
        <pathelement path="${classpath}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement location="${test.classes.dir}"/>
      </classpath>
      <formatter type="plain"/>
      <formatter type="xml"/>
      <sysproperty key="basedir" value="${basedir}"/>
      <batchtest todir="${test.results.dir}">
        <fileset dir="${test.classes.dir}"> 
          <patternset refid="regression.classes"/>
        </fileset>
      </batchtest>
    </junit>        
  </target>


  <!--
    - U N I T T E S T   R E P O R T
    -->
  <target name="test-report" depends="subtest-report,realtest-report"
   description="Generate test results to test-results/junit-noframe.html"/>

  <target name="subtest-report" if="subdirs"
      description="[internal] recurse">
    <my.subant target="test-report"/>
  </target>

  <target name="realtest-report" depends="init" unless="subdirs"  
     description="Generate test results to test-results/junit-noframe.html">

    <junitreport todir="${test.results.dir}">

      <fileset dir="${test.results.dir}">
        <include name="TEST-*.xml"/>
      </fileset>

      <!-- Uses ANT embedded XSL file -->
      <report format="noframes" 
           todir="${test.results.dir}"/>

    </junitreport>
  </target>

  <!-- 
    - R E C U R S E  B U I L D S 
    - Analogous to autoconf's SUBDIRS this will recurse directories calling
    - build files ANT passing target name
    - This is our own subant definition - it passes only top.build.dir property to subant and 
    - it operated on a fileset defined by ${subdirs} is set.
    --> 
    <presetdef name="my.subant"> 
      <subant inheritall="false" inheritrefs="false">
        <property name="top.build.dir" value="${top.build.dir}"/>
        <!-- may be tempted to use patternset, but order is not 
             preserved -->
        <filelist refid="${subdirs}"/>
      	<reference refid="clover.files"/>
      	<propertyset>
          <propertyref prefix="clover"/>
          <propertyref prefix="build.compiler"/>
        </propertyset>
      </subant>
    </presetdef>
    

</project>
