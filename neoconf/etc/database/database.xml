<!--
  - Manages database creation, dropping and upgrading.  The file is processed
  - by ANT and thus the format complies with ANT project files.
  -
  - How to add a database patch:
  -   1. add sql commands to a file called X in this directory, where X is any
  -      value you choose
  -   2. define a target X by copying a patch in the section for the database version
  -      defined at the top of schema.sql
  -   3. Add a sql file reference to build.xml (this may go away)
  -
  - How to initialize tables beyond simple SQL.
  -   1. Add this to your SQL patch file
  -
  -       insert into initialization_task (name) values ('Z');
  - 
  -   2. Follow instructions in InitializationTask.java
  -->
<project name="database" basedir=".">
  <property name="sipxconfig.db.name" value="SIPXCONFIG"/>
  <property name="sipxconfig.db.user" value="postgres"/>
  <property name="sipxconfig.db.password" value=""/>
  <property name="sql.dir" location="${basedir}"/>
  <property name="sipxconfig.db.url" value="jdbc:postgresql://localhost/${sipxconfig.db.name}"/>
  <property name="dblink.sql" location="/usr/share/pgsql/contrib/dblink.sql"/>
  <property name="log.dir" value="${basedir}"/>
  <property name="migration.log" value="${log.dir}/sipxconfig-2.8-db-migration.log"/>
  <property name="tmp.dir" value="${basedir}"/>
  
  <target name="patches">
      <!-- ANT BUG: sql task has issues when output=absolute file path -->
      <sipx-sql print="yes" output="${tmp.dir}/patches.properties" showheaders="no">
        select name || '=true' from patch;
        select 'version' || version || '=true' from version_history;
      </sipx-sql>    
      <loadproperties srcfile="${tmp.dir}/patches.properties"/>
  	  <delete file="${tmp.dir}/patches.properties"/>  	  
  </target>
	
  <!-- sets flag if any initialization needs to be done -->
  <target name="tasks">
    <sipx-sql print="yes" output="${tmp.dir}/tasks.properties" showheaders="no">
      select 'initialize=true' from initialization_task having count(*) > 0;
    </sipx-sql>    
    <loadproperties srcfile="${tmp.dir}/tasks.properties"/>
    <delete file="${tmp.dir}/tasks.properties"/>
  </target>
	
  <target name="drop" description="drops database!">
    <exec executable="dropdb">
      <arg line="-U ${sipxconfig.db.user} ${sipxconfig.db.name}"/>
    </exec>    
  </target>

  <!-- creates database void of schema -->
  <target name="createdb">
    <exec executable="createdb" failonerror="true">
      <arg line="-U ${sipxconfig.db.user} --encoding=UNICODE ${sipxconfig.db.name}"/>
    </exec>
  </target>
  
  <!-- Resets database for unittesting -->
  <target name="unittest-reset" depends="drop,createdb,schema,version0"/>
  
  <!-- 
    - NOTE: Creating a database runs all the patches.  Before shipping, update schema.sql
    - then remove version0 from dependencies. 
    -->
  <target name="create-no-init" depends="createdb,schema,patches,version0">    
  </target>  
  <target name="create" depends="create-no-init,initialize"
    description="create database with schema">    
  </target>  

  <target name="upgrade" description="applied all patches that need to be applied"
    depends="patches,version0,initialize"/>
    	
  <target name="initialize" depends="tasks" if="initialize">
  	<echo>initialize=${initialize}</echo>
    <java classname="org.sipfoundry.sipxconfig.admin.DataInitializer" output="/dev/null">
      <arg value="noexit"/>
    </java>
  </target>
	
  <!-- List each dependency on a separate line below to make source control merging easier -->
  <target name="version0" description="upgrade from version 0" unless="version1"
    depends="initialization_task,
	  user_groups,
	  admin-group-and-user,
	  user_name,
	  user_name_constraints,
	  user_aliases,
	  phoneBeanId,
	  meetme,
	  gatewayBeanId,
	  extension_pool,
	  operator,
	  name_uniqueness,
      relax_group_name_uniqueness,
      phone_description,
	  dialing_rule_name_uniqueness,
	  phone_serial_number_uniqueness,
  	  emergency_routing
	  "/>
  <target name="schema" unless="schema">
    <sipx-sql>
      <transaction src="${sql.dir}/schema.sql"/>
    </sipx-sql>
  </target>  

  <target name="migrate-2.8" depends="migrate-2.8-run,initialize,migrate-2.8-report" 
        description="migrate existing 2.8 PDS database, note clears all existing 3.0 data"/>
  
  <target name="import-2.8" depends="import-2.8-run,migrate-2.8" 
        description="import 2.8 PDS database from backup file, note clears all existing 3.0 data"/>
  
  <target name="reset-superadmin-initialization-task">
    <sipx-sql>
      delete from initialization_task where name = 'admin-group-and-user';
      insert into initialization_task (name) values ('admin-group-and-user');
    </sipx-sql>
  </target>
  <target name="reset-superadmin" depends="reset-superadmin-initialization-task,upgrade"
      description="initialize superadmin user, administation group and resets password to blank"/>

  <!-- 
     Migration Targets Legend

     migrate-2.8          - PDS to SIPXCONFIG, 2.8 release to 3.0 release
    
     version0 to version1 - development database to initial version, this can be deleted
                              when all patches are migrated into schema.sql because migration
                              will be solved by a separate process and we're not supporting
                              upgrading from a development database.
    -->	

  <!-- 
     2.8 Migration
     Because 2.8 database schema was entirely different than 3.0 schema, we have one giant migration script
     written in PL/pgSQL db language and uses the 'dblink' module, a postgres contrib package to 
     translate data.
    -->
  <target name="migrate-2.8-setup">
    <exec executable="createlang" failonerror="true">
      <arg line="-U ${sipxconfig.db.user} plpgsql ${sipxconfig.db.name}"/>
    </exec>
    <condition property="dblink-present">
      <available file="${dblink.sql}"/>
    </condition>
    <fail unless="dblink-present">
      Failed to find dblink SQL ${dblink.sql}.  You either need to install dblink which is part 
      of the postgres contrib (rh: yum install postgresql-contrib) or specify your dblink file
      by passing to this script the following parameter:

        -Ddblink.sql=path to dblink.sql file

    </fail>
    <sipx-sql>
      <transaction src="${dblink.sql}"/>
    </sipx-sql>
  </target>
  <target name="migrate-2.8-run" depends="drop,create-no-init,migrate-2.8-setup">
    <echo>see migration log file for error or potential data loss:</echo>
    <echo>  ${migration.log}</echo>
    <exec executable="psql" output="${migration.log}" failonerror="true">
      <arg line="-a --set ON_ERROR_STOP=true -U ${sipxconfig.db.user} ${sipxconfig.db.name} -f ${sql.dir}/migrate-2.8.sql"/>
    </exec>
  </target>
  <target name="migrate-2.8-report">
    <echo>
 NOTE:  Not all data could be migrated. You may have to re-create data in the
 following areas
    </echo>
    <exec executable="sh">
      <arg value="-c"/>
      <arg value="grep 'NOTICE:\s*DATA LOSS' ${migration.log} | sed 's/.*NOTICE://g'"/>
    </exec>
  </target>
  <target name="import-2.8-run">
    <fail unless="pds.tar.gz">Missing parameter

  You must specify complete path to pds.tar.gz file.  Is one of the output 
  files from running backup-configs.sh on a 2.8 system.

 Example:
 sipxconfig.sh -d -Dpds.tar.gz=/var/backup-configs/pds.tar.gz import-2.8

    </fail>
    <exec executable="createuser" outputproperty="eatme">
      <arg line="-U ${sipxconfig.db.user} --createdb --no-adduser sipxchange"/>
    </exec>    
    <exec executable="dropdb">
      <arg line="-U ${sipxconfig.db.user} PDS"/>
    </exec>    
    <exec executable="createdb">
      <arg line="-U ${sipxconfig.db.user} --encoding=UNICODE PDS"/>
    </exec>    
    <exec executable="/bin/sh">
      <arg value="-c"/>
      <arg value="zcat ${pds.tar.gz} | pg_restore -U ${sipxconfig.db.user} -d PDS"/>
    </exec>    
  </target>

   <!--
    - version0 patches
    -->
  <target name="initialization_task" unless="initialization_task">
    <db-patch patch="initialization_task"/>
  </target>
  <target name="user_groups" unless="user_groups">
    <db-patch patch="user_groups"/>
  </target>
  <target name="admin-group-and-user" unless="admin-group-and-user">
      <sipx-sql>
        insert into initialization_task (name) values ('admin-group-and-user');
      </sipx-sql>
      <mark-patch-applied patch="admin-group-and-user"/>
  </target>
  <target name="operator" unless="operator">
    <sipx-sql>
      	insert into initialization_task (name) values ('operator');
    </sipx-sql>
  	<mark-patch-applied patch="operator"/>
  </target>  
  <target name="phoneBeanId" unless="phoneBeanId">
    <sipx-sql>
      	alter table phone rename column factory_id to bean_id;
      	alter table phone add column model_id varchar(64);
    </sipx-sql>
  	<mark-patch-applied patch="phoneBeanId"/>
  </target>
  <target name="gatewayBeanId" unless="gatewayBeanId">
    <sipx-sql>
      	alter table gateway rename column factory_id to bean_id;
      	alter table gateway add column model_id varchar(64);       
    </sipx-sql>
  	<mark-patch-applied patch="gatewayBeanId"/>
  </target>  
  
  <target name="user_name" unless="user_name">
    <sipx-sql>
		alter table users rename column display_id to user_name;
    </sipx-sql>
  	<mark-patch-applied patch="user_name"/>
  </target>
  <target name="user_name_constraints" unless="user_name_constraints">
    <sipx-sql>
		alter table users add constraint uqc_user_name unique (user_name);
		alter table users alter column user_name set not null;
    </sipx-sql>
  	<mark-patch-applied patch="user_name_constraints"/>
  </target>
  <target name="user_aliases" unless="user_aliases">
    <db-patch patch="user_aliases"/>
  </target>  
  <target name="meetme" unless="meetme">
    <db-patch patch="meetme"/>
  </target>  
  <target name="extension_pool" unless="extension_pool">
    <db-patch patch="extension_pool"/>
  </target>  
  <target name="name_uniqueness" unless="name_uniqueness">
    <db-patch patch="name_uniqueness"/>
  </target>  
  <target name="relax_group_name_uniqueness" unless="relax_group_name_uniqueness">
    <sipx-sql>
      alter table group_storage drop constraint uqc_group_storage_name;
      alter table group_storage add constraint uqc_group_storage_name unique (name, resource);
    </sipx-sql>
  	<mark-patch-applied patch="relax_group_name_uniqueness"/>
  </target>
  <target name="phone_description" unless="phone_description">
    <sipx-sql>
		alter table phone add column description varchar(255);  
		update phone set description=name;
		alter table phone drop column name;
		update phone set bean_id = 'unmanagedPhone' where bean_id = 'genericPhone';
	</sipx-sql>
  	<mark-patch-applied patch="phone_description"/>
  </target>
  <target name="dialing_rule_name_uniqueness" unless="dialing_rule_name_uniqueness">
    <db-patch patch="dialing_rule_name_uniqueness"/>
  </target>  
  <target name="phone_serial_number_uniqueness" unless="phone_serial_number_uniqueness">
    <sipx-sql>	
		alter table phone add constraint uqc_phone_serial_number unique (serial_number);
		alter table phone alter column serial_number set not null;
	</sipx-sql>
  	<mark-patch-applied patch="phone_serial_number_uniqueness"/>
  </target>
  <target name="emergency_routing" unless="emergency_routing">
	    <db-patch patch="emergency_routing"/>
  </target>  
	
  <!--
    - SUPPORT UTILITIES
    -->
  <!-- Run SQL on SIPXCONFIG database and update patch list if successful -->  
  <macrodef name="db-patch">
    <attribute name="patch"/>
    <sequential>
      <sipx-sql>
        <transaction src="${sql.dir}/@{patch}.sql"/>
      </sipx-sql>
      <mark-patch-applied patch="@{patch}"/>    
    </sequential>
  </macrodef>
      
  <!-- patch list as successful -->  
  <macrodef name="mark-patch-applied">
    <attribute name="patch"/>
    <sequential>
    <sipx-sql>
      insert into patch (name) values ('@{patch}');
    </sipx-sql>  
    <property name="@{patch}" value="true"/>
    </sequential>
  </macrodef>

  <!-- Run SQL on SIPXCONFIG database -->  
  <presetdef name="sipx-sql">
    <sql driver="org.postgresql.Driver" 
        url="${sipxconfig.db.url}" 
        userid="${sipxconfig.db.user}" 
        password="${sipxconfig.db.password}"
        classpath="${jdbc-driver.jar}"/>
  </presetdef>
  
</project>
