<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" 
	"http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
  <!--
  -  S Y S T E M  D I R E C T O R I E S
  -  evaluates system directory variables e.g. ${sysdir.*} in this file
  -->
  <bean id="sipxconfig.properties" class="org.springframework.core.io.ClassPathResource">
    <constructor-arg index="0">
      <value>sipxconfig.properties</value>
    </constructor-arg>
  </bean>
  <bean id="sysdir"
    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location">
      <ref bean="sipxconfig.properties"></ref>
    </property>
  </bean>
  
  <!-- This is used in unit test environment only: we change dataSource.jdbcUrl using this mechanism -->
  <bean id="overrider"
    class="org.springframework.beans.factory.config.PropertyOverrideConfigurer">
    <property name="location">
      <ref bean="sipxconfig.properties"></ref>
    </property>
  </bean>
  <!--
  - P O S T G R E S
  -->
  <!-- Use c3p0 to manage database connections.
  	   See http://www.mchange.com/projects/c3p0/index.html#using_c3p0 for documentation on
  	   configuration properties.
  	   See http://www.mchange.com/projects/c3p0/apidocs/com/mchange/v2/c3p0/ComboPooledDataSource.html
  	   for documentation on this class. -->
  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <property name="driverClass">
      <value>org.postgresql.Driver</value>
    </property>
    <property name="jdbcUrl">
      <value>jdbc:postgresql://localhost/SIPXCONFIG</value>
    </property>
    <property name="user">
      <value>postgres</value>
    </property>
    <!-- Determines how many connections at a time c3p0 will try to acquire when the pool
         is exhausted.  Default: 3.
         Use the default. -->
    <property name="acquireIncrement">
      <value>3</value>
    </property>
    <!-- The number of milliseconds a client calling getConnection() will wait for a Connection
         to be checked-in or acquired when the pool is exhausted. Zero means wait indefinitely. 
         Setting any positive value will cause the getConnection() call to time-out and break
         with an SQLException after the specified number of milliseconds.  Default: 0.
         Set this to 300000 (5 minutes) because sipXconfig should never hang forever, and the
         SQLException will provide useful debug info. -->
    <property name="checkoutTimeout">
      <value>300000</value>
    </property>
    <!-- Number of Connections a pool will try to acquire upon startup. Should be between
         minPoolSize and maxPoolSize.  Default: 3.
         Use the default.  -->
    <property name="initialPoolSize">
      <value>3</value>
    </property>
    <!-- Seconds a Connection can remain pooled but unused before being discarded.
         Zero means idle connections never expire.  Default: 0.
         Set this to 900000 (15 minutes) because connections shouldn't hang around forever.
      -->
    <property name="maxIdleTime">
      <value>900000</value>
    </property>
    <!-- Maximum number of Connections a pool will maintain at any given time.  Default: 15.
         Use the default. -->
    <property name="maxPoolSize">
      <value>15</value>
    </property>
    <!-- Minimum number of Connections a pool will maintain at any given time.  Default: 3.
         Use the default. -->
    <property name="minPoolSize">
      <value>3</value>
    </property>
  </bean>
  <!--
  - T R A N S A C T I O N  S U P P O R T
  -->
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource">
      <ref local="dataSource"/>
    </property>
  </bean>
  <!--
  - H I B E R N A T E   F A C T O R Y
  -->
  <bean id="sessionFactory" class="org.sipfoundry.sipxconfig.common.DynamicSessionFactoryBean">
    <property name="dataSource">
      <ref local="dataSource"/>
    </property>
    <property name="mappingResources">
      <list>
        <value>org/sipfoundry/sipxconfig/admin/callgroup/callGroup.hbm.xml</value>
        <value>org/sipfoundry/sipxconfig/admin/parkorbit/parkOrbit.hbm.xml</value>
        <value>org/sipfoundry/sipxconfig/admin/forwarding/ring.hbm.xml</value>
        <value>org/sipfoundry/sipxconfig/admin/admin.hbm.xml</value>
        <value>org/sipfoundry/sipxconfig/admin/backup.hbm.xml</value>
        <value>org/sipfoundry/sipxconfig/admin/dialplan/dialingRule.hbm.xml</value>
        <value>org/sipfoundry/sipxconfig/admin/dialplan/autoAttendant.hbm.xml</value>
        <value>org/sipfoundry/sipxconfig/common/common.hbm.xml</value>
        <value>org/sipfoundry/sipxconfig/conference/conference.hbm.xml</value>
        <value>org/sipfoundry/sipxconfig/gateway/gateway.hbm.xml</value>
        <value>org/sipfoundry/sipxconfig/phone/phone.hbm.xml</value>
        <value>org/sipfoundry/sipxconfig/setting/setting.hbm.xml</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.dialect"> org.hibernate.dialect.PostgreSQLDialect</prop>
        <prop key="hibernate.query.substitutions">true=1 false=0</prop>
        <!-- prop key="hibernate.show_sql">true</prop -->
      </props>
    </property>
    <property name="baseClassBeanIds">
      <list>
        <value>gwGeneric</value>
        <value>unmanagedPhone</value>
      </list>
    </property>
    
    <!-- unless otherwise specified property nameLikeThis will be mapped to column name_like_this -->
    <property name="namingStrategy">
      <bean class="org.sipfoundry.sipxconfig.common.ImprovedNamingStrategy"/>
    </property>
  </bean>
  <!--
  - H I B E R N A T E   S E S S I O N
  -->
  <bean id="hibernateInterceptor" class="org.springframework.orm.hibernate3.HibernateInterceptor">
    <property name="sessionFactory">
      <ref bean="sessionFactory"/>
    </property>
    <property name="entityInterceptor">
      <ref local="springInstantiator"/>
    </property>
  </bean>
  <!-- springInstantiator will force hibernate to create new objects through Spring -->
  <bean id="springInstantiator"
    class="org.sipfoundry.sipxconfig.common.SpringHibernateInstantiator">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>
  <!--
  - Use this instead of 'hibernateInterceptor' when you want to
  - load spring beans from hibernate mappings.  See common/common.beans.xml for example
  -->
  <bean id="abstractDao" abstract="true">
    <property name="interceptorNames">
      <list>
        <value>hibernateInterceptor</value>
        <value>onDeleteAdvisor</value>
        <value>onSaveAdvisor</value>
      </list>
    </property>
  </bean>
  <bean id="onDeleteAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
    <property name="advice">
      <ref local="onDeleteEventDispatcher"/>
    </property>
    <property name="patterns">
      <list>
        <!-- AnyClass.deleteAnyThing(Object, ...) -->
        <value>.*\.delete.*</value>
      </list>
    </property>
  </bean>
  <bean id="onSaveAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
    <property name="advice">
      <ref local="onSaveEventDispatcher"/>
    </property>
    <property name="patterns">
      <list>
        <!-- AnyClass.saveAnything(Object, ...) -->
        <value>.*\.save.*</value>
      </list>
    </property>
  </bean>
  
  <bean id="daoEventPublisher" class="org.sipfoundry.sipxconfig.common.event.DaoEventPublisherImpl"/>
  
  <bean id="onDeleteEventDispatcher" class="org.sipfoundry.sipxconfig.common.event.DaoEventDispatcher"
    factory-method="createDeleteDispatcher">
  	<property name="publisher">
      <ref local="daoEventPublisher"/>
    </property>
  </bean>
  
  <bean id="onSaveEventDispatcher" class="org.sipfoundry.sipxconfig.common.event.DaoEventDispatcher"
    factory-method="createSaveDispatcher">
  	<property name="publisher">
      <ref local="daoEventPublisher"/>
    </property>
  </bean>
  
  <!--
  - V E L O C I T Y
  -->
  <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
    <property name="resourceLoaderPath">
      <value>file:${sysdir.etc}</value>
    </property>
  </bean>
</beans>
