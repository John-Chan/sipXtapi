
This file was generated using the following command.  If you are
already looking at this from web browser, then please ignore this
message.

  lynx -dump doc/src/manual/todo.html > TODO

----------------------------------------------------------

                                     TODOs

   Short term TODOs are either managed in the issue tracker as Tasks or
   source level TODOs are tracked by leaving TODO in comments. This page
   talks about some of the longer term issues we'd like to track.

   All the changes that we introduce in sipXconfig code are the results
   of implementing user requirements. We do not change sipXconfig
   architecture without a user story to be implemented. Every change has
   a its corresponding JIRA issue. The long term goal of the team is to
   make sipXconfig simpler, more testable and easier to extend. On this
   page we maintain a registry of ideas of how to get closer to this
   goal. We may choose to implement some of those opportunistically or,
   if we deem it important enough, we may dedicate a spring to implement
   some of them. Placing items on this list does not however constitute
   any type of commitment on sipXconfig team.

Simplify database access

   Currently we use mixture of SQL (JDBC) on container managed
   persistence - it's hard to maintain. Use only method to access
   database. Standardize on one of the following:
     * EJB container managed persistence
     * Java DAO or similar
     * object persistence framework

Remove or reduce JDOM dependency

   We probably do not need to use JDOM: at least not as widely as we
   currently do. In most case we use it to generate snippets of XML.That
   should be replaced with a template generator (Velocity or similar). In
   other cases, where we parse XML using JDOM, we can probably replace it
   with XLT.

Normalize database

   We currently keep in our database information that can be easily
   recreated. As a result when device or user data changes we have to
   regenerate (fix) the database contents. It looks like it was done to
   improve the performance of publishing process (which seems strange -
   performance of UI seems to be more important). We may be better off
   generating this kind of data on demand (instead of keeping in
   database). However we need to have performance test before we try it
   to change it.

Use HTTPUnit

   Use HTTPUnit for regression and performance testing of the UI.

Define local interfaces for entity beans

   Entity beans are accessed locally only in sipXconfig. In spite of that
   they have only remote interfaces defined. We could significantly
   improve the performance of the application, if we replaced the remote
   interfaces for entity beans with local ones. Even if we do in fact
   access those beans remotely adding local interfaces would help with
   majority of the cases where entity beans act as a back end for a
   facade of session beans (A.K.A advocate beans). The same maybe true
   about session beans.

Update JBoss

   Update code to current version of JBoss. Clearly delineate code that
   depends on JBoss server from container independent code. Consider
   removing dependency on JBoss in favor of some lighter weight
   container.

Plugin API for Support of New Phones

   Adding support for a new phone meaning "weaving" code into multiple
   spots. We need to make adding a new phone as simple as loading the
   code from a jar. This is a large goal.

Update SIPFoundry Website

   Update [1]http://www.sipfoundry.org/sipXconfig , possibly a copy of
   this manual

Replace ProfilePulisher with sipXpublisher Plugin

   ProfilePublisher handles SIP SUBSCRIBE/NOTIFY messages for event type
   config. sipXpublisher does the same this for MWI (voicemail) and
   already has plugin architecture. Challenge, is one's in java and
   postgres, other is in C++ and IMDB so port won't be clear-cut.
   Last modified: Wed Oct 6 10:25:15 EDT 2004

References

   1. http://www.sipfoundry.org/sipXconfig
