/*
 * 
 * 
 * Copyright (C) 2004 SIPfoundry Inc.
 * Licensed by SIPfoundry under the LGPL license.
 * 
 * Copyright (C) 2004 Pingtel Corp.
 * Licensed to SIPfoundry under a Contributor Agreement.
 * 
 * $$
 */



package com.pingtel.pds.pgs.user;

import javax.ejb.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import com.pingtel.pds.pgs.common.ejb.JDBCAwareEJB;
import com.pingtel.pds.pgs.organization.Organization;
import com.pingtel.pds.pgs.organization.OrganizationHome;
import com.pingtel.pds.common.PDSException;

import java.util.Collection;


/**
 * EJ Bean implementation class for the Application EJ Bean.
 *
 * @author IB
 */
public class ApplicationBean extends JDBCAwareEJB
        implements EntityBean, ApplicationBusiness {

//////////////////////////////////////////////////////////////////////////
// Constants
////


//////////////////////////////////////////////////////////////////////////
// Attributes
////
    // bean state fields
    // PK of this Application, autogenerated.
    public Integer id;

    // the name/identity as seen by the users of the system.
    public String name;

    // PK of the RefProperty which this Application is an instance of.
    // Each (Pingtel) Application has a RefPropertyID so as to allow
    // use to do specialized projection for different types of applications.
    public Integer refPropertyID;

    // url is the URL of the the actual Java jar file which the Pingtel
    // phone should execute.
    public String url;

    // all Applications belong to an Organization.
    public Integer organizationID;

    // Applications are bound to particular DeviceTypes.  Not really used
    // at the moment.
    public Integer deviceTypeID;

    // A textual description.
    public String description;


    // home interface references
    private OrganizationHome mOrganizationHome;

    /**
     *  Standard EJB definition
     */
    private EntityContext mCTX;

//////////////////////////////////////////////////////////////////////////
// Construction
////


//////////////////////////////////////////////////////////////////////////
// Public Methods
////
    /**
     * Standard EJB implementation of a ejbCreate method.
     *
     * @param name the name by which the new Application will be known to
     * users of the sytem.
     * @param organizationID PK of the Organization which this Application
     * will belong to.
     * @param deviceTypeID PK of the DeviceType that this Application is
     * available to.
     * @param refPropertyID PK of the RefProperty which this Application is
     * and instance of.  Currently all Applications should be created using
     * the Pingtel 'USER' RefProperty.   When we get around to it there are
     * other types off Applications that can run on the the phone such as
     * 'VoiceMail'.   We differentiate Applications using different
     * RefProperties because their cardinalities may be different.
     * Reason, we don't want to have Applications competing for resources,
     * such as VoiceMail or CallLogging.
     * @param url URL that will be sent to the Devices as being the location
     * of the the Application.
     * @param description description of the new Application.
     * @return PK of new Application.
     * @throws PDSException for validation errors
     */
    public Integer ejbCreate (  String name,
                                Integer organizationID,
                                Integer deviceTypeID,
                                Integer refPropertyID,
                                String url,
                                String description ) throws PDSException {

        id = new Integer (this.getNextSequenceValue("APP_SEQ"));
        setName(name);
        this.organizationID = organizationID;
        this.deviceTypeID = deviceTypeID;
        this.refPropertyID = refPropertyID;
        setURL(url);
        setDescription(description);

        return null;
    }

    /**
     *  Standard EJB implementation
     */
    public void ejbPostCreate ( String name,
                                Integer organizationID,
                                Integer deviceTypeID,
                                Integer refPropertyID,
                                String url,
                                String description ) throws CreateException {}

    /**
     *  Standard EJB implementation
     */
    public void ejbLoad () {}

    /**
     *  Standard EJB implementation
     */
    public void ejbStore  () {}

    /**
     *  Standard EJB implementation
     */
    public void ejbRemove () {}

    /**
     *  Standard EJB implementation
     */
    public void ejbActivate () {}

    /**
     *  Standard EJB implementation
     */
    public void ejbPassivate () {}

    /**
     *  Standard EJB implementation
     */
    public void setEntityContext ( EntityContext ctx ) {
        this.mCTX = ctx;

        try {
            Context initial = new InitialContext();
            mOrganizationHome = (OrganizationHome) initial.lookup ("Organization");
        }
        catch (NamingException ne) {
            logFatal( ne.toString(), ne );
            throw new EJBException(ne);
        }
    }

    /**
     *  Standard EJB implementation
     */
    public void unsetEntityContext ( ) {
        this.mCTX = null;
    }


    // accessors/mutators
    /**
     * getID returns the PK or Id of this Application.
     *
     * @return id of this Application
     */
    public Integer getID() {
        return this.id;
    }

    /**
     * getName returns the name of this Application.
     *
     * @return name of this Application.
     */
    public String getName() {
        return this.name;
    }

    /**
     * setName changes the name of the Application.   It
     * performs various validation checks on the argument such
     * as that it can not be null or exceed MAX_NAME_LEN
     *
     * @param name the new name to assign to this Application
     * @throws PDSException is thrown if the name arguement
     * breaks any of the validation rules.
     *
     */
    public void setName (String name) throws PDSException {
        if (name != null && name.length() > MAX_NAME_LEN) {
            mCTX.setRollbackOnly();

            throw new PDSException(
                collateErrorMessages(   "E3028",
                                        new Object[]{
                                            "name",
                                            new Integer(MAX_NAME_LEN)}));
        }
        this.name = name;
    }

    /**
     * getRefPropertyID returns the RefPropertyID of the Application.
     * Each (Pingtel) Application has a RefPropertyID so as to allow
     * use to do specialized projection for different types of applications.
     *
     * @return PK of the RefProperty which this Application corresponds to.
     */
    public Integer getRefPropertyID () {
        return this.refPropertyID;
    }

    /**
     * getURL returns the URL of this Application
     * @return the URL of this Application.
     */
    public String getURL () {
        return this.url;
    }

    /**
     * setURL lets you modify the URL of this Application.
     * There are various validation rules for Application URLs
     * such as they can not be null or be longer than MAX_URL_LEN
     * or duplicates of existing URLs in the Config Server.
     *
     * @param url new URL for the Application.
     * @throws PDSException is thrown  if any of the validation
     * rules are broken.
     */
    public void setURL (String url) throws PDSException {
        if (url != null && url.length() > MAX_URL_LEN) {
            mCTX.setRollbackOnly();

            throw new PDSException(
                collateErrorMessages(   "E3028",
                                        new Object[]{
                                            "URL",
                                            new Integer(MAX_URL_LEN)}));
        }

        Collection existing = null;

        try {
            existing = ((ApplicationHome)mCTX.getEJBHome()).findByUrl(url);
        }
        catch (Exception e) {
            logFatal(e.getMessage());
            throw new EJBException(e.getMessage());
        }

        if (!existing.isEmpty()) {
            mCTX.setRollbackOnly();

            throw new PDSException(collateErrorMessages("E2037", new Object[]{url}));
        }

        this.url = url;
    }

    /**
     * getOrganizationID returns the PK of the Organization that this Application
     * belongs to.
     *
     * @return PK of the Application this Application belongs to.
     */
    public Integer getOrganizationID () {
        return this.organizationID;
    }

    /**
     * getDeviceTypeID returns the PK of the DeviceType that this Application runs
     * on.  This is not really used as we currently only support Pingtel
     * applications.
     *
     * @return PK of the DeviceType that this Application can execute on.
     */
    public Integer getDeviceTypeID () {
        return this.deviceTypeID;
    }

    /**
     * getDescription returns a description of this Application if one
     * has be given to it.
     *
     * @return returns the description of the Application.
     */
    public String getDescription () {
        return this.description;
    }

    /**
     * setDescription allows you to change the description for this Application.
     *
     * @param description new description for the Application.
     * @throws PDSException is thrown if the description is too long
     * (MAX_DESCRIPTION_LEN) or null.
     */
    public void setDescription (String description) throws PDSException {
        if (description != null && description.length() > MAX_DESCRIPTION_LEN ) {
            mCTX.setRollbackOnly();

            throw new PDSException(
                collateErrorMessages(   "E3028",
                                        new Object[]{
                                            "description",
                                            new Integer(MAX_DESCRIPTION_LEN)}));
        }
        this.description = description;
    }


    /**
     * getExternalID returns a friendly identifier for this Application.
     *
     * @return friendly identifier for this Application.
     */
    public String getExternalID () {
        Organization organization = null;
        try {
            organization = mOrganizationHome.findByPrimaryKey( organizationID );
            return "name: " + this.name + " URL: " + this.url +
                " organization: " + organization.getExternalID();
        }
        catch ( Exception ex ) {
            logFatal( ex.toString(), ex );
            throw new EJBException ( ex );
        }
    }

//////////////////////////////////////////////////////////////////////////
// Implementation Methods
////


//////////////////////////////////////////////////////////////////////////
// Nested / Inner classes
////


//////////////////////////////////////////////////////////////////////////
// Native Method Declarations
////

}
