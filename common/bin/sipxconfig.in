#!/bin/sh
#
# chkconfig: 35 82 55
# description: The sipXconfig set of servers.
# processname: sipXconfig
# pidfile: @sipxpbx.run.dir@/sipxconfig.pid
#
# Copyright (C) 2004 SIPfoundry Inc.
# Licensed by SIPfoundry under the LGPL license.
#
# Copyright (C) 2004 Pingtel Corp.
# Licensed to SIPfoundry under a Contributor Agreement.
#

# This is an interactive program; we need the current locale.
[ -f /etc/profile.d/lang.sh ] && . /etc/profile.d/lang.sh

if [ "$LANG" = "ja" -o "$LANG" = "ja_JP.eucJP" ]; then
    # We can't Japanese on normal console at boot time.
    # So, force to set LANG=C
    if [ "$TERM" = "linux" ] ; then
        LANG=C
    fi
fi

## Source function library.

# Set up correctly depending on the distribution
if [ -f /etc/init.d/functions.sh ]
then
  # Gentoo
  echo_success() 
  {
      echo success
  }
  echo_failure() 
  {
      echo failure
  }
  . /etc/init.d/functions.sh
else
  # Redhat 
  . /etc/init.d/functions
fi

# Unfortunately, $? will never report failure as su will always succeed.
# Therefore we wait after the fork and see if the .pid file was created

start() { # process-name  process-wd  process-command
   proc_name=$1; shift
   proc_wd=$1; shift
   proc_cmd=$*
        # Allow core files to be generated for debugging. This feature is turned
        # off by default and should only be used by developers. Uncomment this
        # to allow core files but beware that these use lots of disk space.
        #ulimit -c unlimited

        cd $proc_wd || return 1
        
        echo -n $"Starting $proc_name: "

        iam=`whoami`
        if [ $iam = @sipxpbx.user@ ]
        then
            ( exec $proc_cmd ) > /dev/null 2>&1 < /dev/null &
        elif [ $iam = root ]
        then
            su @sipxpbx.user@ -c "$proc_cmd" > /dev/null 2>&1 < /dev/null &
        else
            echo "You must be able to start as @sipxpbx.user@" 1>&2
            echo_failure
            exit 1
        fi

        for ticks in 3 2 1 0 
        do
           sleep 1
           test -e @sipxpbx.run.dir@/$proc_name.pid && break || echo -n "."
        done

        if [ -e @sipxpbx.run.dir@/$proc_name.pid ]
        then
                echo_success
        else
                STATUS=1
                echo_failure
        fi

        echo
        return $STATUS
}


stop() {
   proc_name=$1; shift

   echo -n "  Stop: $proc_name "
   STATUS=0

   if [ ! -r @sipxpbx.run.dir@/$proc_name.pid ]
   then
      echo -n "(Not Started) "
   else
       PID=`cat @sipxpbx.run.dir@/$proc_name.pid 2> /dev/null`

       if [ ! -e /proc/$PID ]
       then
          echo -n "(Not Running) "
       else
          kill -15 $PID 2> /dev/null
          for ticks in 3 2 1 0 
          do
             sleep 1
             test -e /proc/$PID && break || echo -n "."
          done
          if [ -e /proc/$PID ]
          then
              echo -n "(killing) "
              kill -9 $PID 2> /dev/null
              for ticks in 3 2 1 0 
              do
                 sleep 1
                 test -e /proc/$PID && break || echo -n "."
              done
          fi
   
          if [ -e /proc/$PID ]
          then
              STATUS=1
          else
              STATUS=0
              rm -f @sipxpbx.run.dir@/$proc_name.pid
          fi
       fi
   fi

   if [ $STATUS -eq 0 ]
   then
       echo_success
       echo ""
   else
       echo_failure
       echo ""
   fi
}

# Stops the watchdog progess (running as sipxchange),
# and the SIPxchange services
do_stop() {

   echo "Stopping sipXconfig: "

   stop profilegenerator

   stop profilewriter

   stop profilepublisher

   stop rmiregistry

   # The following line is so that the GUI
   # detects a successful shutdown properly
   true
}

do_start() {

        # Start up the watchdog
        start rmiregistry @sipxpbx.conf.dir@ @bin.dir@/startrmireg.sh 2> /dev/null

        start profilepublisher @sipxpbx.conf.dir@ @bin.dir@/profilepublisher.sh 2> /dev/null

        start profilewriter @sipxpbx.conf.dir@ @bin.dir@/profilewriter.sh 2> /dev/null

        start profilegenerator @sipxpbx.conf.dir@ @bin.dir@/profilegenerator.sh 2> /dev/null

}

# See how we were called.
case "$1" in
  start)
        # Check for already running watchdog
        if [ -f @sipxpbx.run.dir@/run/sipxconfig.pid ]
        then
                echo -n "sipXconfig already started. Try stop or restart."
                echo_failure
                echo
        else
                do_start
        fi
        ;;
  stop)
        do_stop
        ;;
  restart)
        do_stop
        do_start
        ;;
  *)
        echo $"Usage: $0 {start|stop|restart}"
        exit 1
esac

exit $?
