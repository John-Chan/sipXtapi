
  The sipXregistry redirect server maps addresses in a series of
  lookups, adding Contacts for each to a result set.  When all the
  lookups are complete, it returns a redirect response to the request
  based on the contents of the result set (or a not found response if
  the result set is empty).

  1) Registrations ($prefix/var/sipxdata/sipdb/registration.xml)

     If the target URI matches a registered address, then the Contact
     addresses sent in the registration are added.  These are stored
     in the in-memory database, but are made persistent in the xml
     file.  You can read the in-memory database directly using the
     sipdbtest utility found in the sipXcommserverLib.

  2) Alias ($prefix/var/sipxdata/sipdb/alias.xml)

     The file maps addresses based on the contacts configured in the
     xml file.  Each AOR can translate to any number of contacts.
     This is used for direct mappings such as a user name for use in a
     SIP URL to an extension number (or the reverse).  There is an
     example alias.xml file in this directory.

  3) Mapping Rules ($prefix/etc/sipxpbx/mappingrules.xml)

     Mapping rules provide the means to select addresses based on
     host and user name patterns and configured permissions, and then
     add contacts that may use the results of those matches and other
     configured data to add contacts to the result set.

  4) Fallback Mapping Rules ($prefix/etc/sipxpbx/fallbackrules.xml)

     This phase is used _only_ if there are no contacts in the result
     set when it is reached; if the result set is non-empty, this
     phase is skipped.  This is normally used to provide mapping to
     non-local addresses (such as to a gateway or the proxy
     authoritative for another domain).  The mapping rules file in
     this phase uses the same syntax and expressive ability as the
     first Mapping Rules phase.

  5) Hunt Group Reordering ($prefix/var/sipxdata/sipdb/huntgroup.xml)

     This phase occurs _only_ if the result set is non-empty.  If the
     target URI is found in the huntgroups file, then any contacts in
     the result set that do not have explicit 'q' values assigned (q
     values may be provided with any of the above mechanisms), are
     given randomly assigned unique q values in the range 0.2 to 0.8.
     This causes those contacts to be tried serially rather than
     in parallel (the restricted range allows contacts provided by
     other means to be explicitly above or below the randomized
     range).  There is an example huntgroup.xml file in this
     directory.

  Other Configuration files
  =========================

  The following configuration files are also important, but they are
  also shared with other components, so they are documented in
  sipXcommserverLib/doc:

  $prefix/var/sipxdata/sipdb/credentials.xml
     Defines all user identities and the credentials used to
     authenticate them.

  $prefix/var/sipxdata/sipdb/permission.xml
     Defines permissions granted to each identity.


