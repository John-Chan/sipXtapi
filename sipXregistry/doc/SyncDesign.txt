


SIPfoundry sipXpbx                                           S. Lawrence
                                                               D. Worley
                                                              W. Gillett
                                                           Pingtel Corp.
                                                       December 29, 2005


                       sipXpbx High Availability


Table of Contents

   1.  Motivation and Overview . . . . . . . . . . . . . . . . . . ancho
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . ancho
   3.  High Availability Architecture  . . . . . . . . . . . . . .  arch
   4.  Current Registrar/Redirect Database Management  . . . . . . ancho
     4.1.  Database Structure  . . . . . . . . . . . . . . . . . . ancho
     4.2.  REGISTER Request Updates  . . . . . . . . . . . . . . . apply
     4.3.  Locking . . . . . . . . . . . . . . . . . . . . . . . . ancho
   5.  Changes . . . . . . . . . . . . . . . . . . . . . . . . . . ancho
     5.1.  Configuration . . . . . . . . . . . . . . . . . . . . . ancho
     5.2.  Primary and Replicated Registrars . . . . . . . . . . . ancho
     5.3.  Registry Synchronization State  . . . . . . . . . . . . ancho
     5.4.  Registration Database Changes . . . . . . . . . . . . . dbcha
     5.5.  Threads . . . . . . . . . . . . . . . . . . . . . . . . ancho
     5.6.  Locking Changes . . . . . . . . . . . . . . . . . . . . dbloc
     5.7.  Processing  . . . . . . . . . . . . . . . . . . . . . . xmlrp
       5.7.1.  Startup Processing  . . . . . . . . . . . . . . . . start
       5.7.2.  Transition from Startup Phase to Operational Phase  trans
       5.7.3.  Operational Phase . . . . . . . . . . . . . . . . . opera
         5.7.3.1.  SipRegistrarServer  . . . . . . . . . . . . . . SipRe
         5.7.3.2.  RegistrarSync . . . . . . . . . . . . . . . . . regis
         5.7.3.3.  RegistrarTest . . . . . . . . . . . . . . . . . regis
       5.7.4.  Applying Updates to the Directory . . . . . . . . . apply
     5.8.  XML RPC Methods . . . . . . . . . . . . . . . . . . . . xmlrp
       5.8.1.  registrarSync.pullUpdates method  . . . . . . . . . pullU
       5.8.2.  registrarSync.reset method  . . . . . . . . . . . . reset
       5.8.3.  registrarSync.pushUpdates method  . . . . . . . . . pushU
     5.9.  XML-RPC Security  . . . . . . . . . . . . . . . . . . . xmlrp
     5.10. HTTP Persistent Connections . . . . . . . . . . . . . . ancho
     5.11. Authorization Proxy Record-Route  . . . . . . . . . . . authr
     5.12. Protocol Versioning . . . . . . . . . . . . . . . . . . ancho
     5.13. Loose Ends  . . . . . . . . . . . . . . . . . . . . . . ancho
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . .     0







Lawrence, et al.                                                [Page 1]

                               sipXpbx HA                  December 2005


1.  Motivation and Overview

   For large systems, defined as PBXs with more than a few dozen users,
   high availability (HA) for basic calling is essential: users should
   be able to make and receive phone calls reliably at all times.  HA
   for voice mail, and perhaps some other services, is a lower priority
   although still important.

   * In order to deliver HA as quickly as possible, we will start by
   implementing only those features that are absolutely required.  The
   first HA implementation, targeted for sipXpbx release 3.2, will only
   address basic calling.  Automated installation will not be supported;
   some custom, manual configuration will be required.  No more than 2
   registrars will be supported. *

   In sipXpbx, basic calling depends on three components: the two
   proxies and the registrar/redirect service.  The proxies can be
   replicated and DNS SRV records can be used to share load and provide
   for failover.  The registrar/redirect service, however, cannot
   currently be deployed on multiple servers because the 'soft' state in
   the registry database (mappings from registered Addresses to
   Contacts) cannot be shared.  While replicating the proxies alone does
   help with scaling, the registrar is a single point of failure for
   basic calling service.

   This memo describes a system architecture to provide high
   availability service for basic calling, by adding the required
   replication of registration information.


2.  Terminology

   Server A physical computer system.
   Service A process or processes running on a Server that performs a
      particular function.
   Primary Registrar For a particular REGISTER request, the registrar
      that receives it and performs initial processing for it.  Note
      that the Primary Registrar may not be the same for successive
      REGISTER requests, even from one UA.
   Replicated Registrar For a particular REGISTER request, any registrar
      other than its Primary Registrar to which its information is
      replicated.


3.  High Availability Architecture

   In an HA configuration, there are at least two types of Server:




Lawrence, et al.                                                [Page 2]

                               sipXpbx HA                  December 2005


   o  one Master Server running:
      *  forking proxy
      *  authentication proxy
      *  registrar/redirect service
      *  config service
      *  vxml service with applications
      *  publisher (status server)
      *  presence
   o  one or more Distributed Servers, each running:
      *  forking proxy
      *  authentication proxy
      *  registrar/redirect service

   Other PBX Services may be distributed among the above Servers, or run
   on other Servers:

   * In Release 3.2, only one configuration will be supported: one
   Distributed Server running only the proxies and registrar/redirect
   service, and one Master Server running all Services. *

   In order to provide load sharing and failover, all SIP message
   routing to any redundant element in an HA configuration uses DNS SRV
   records.  The following SRV records are required:
   domain In a single-system installation, an SRV record that maps the
      SIP domain name to the Server host name is recommended.  In an HA
      installation, multiple SRV records for the SIP domain name are
      required, mapping to the Server names/ports that run the forking
      proxy service.  There are domain SRV records specifying both TCP
      and UDP (with TCP given preference).  For example:

         $ORIGIN example.com.

         _sip._tcp IN SRV   1 50 5060 sipxpbx1
         _sip._tcp IN SRV   1 50 5060 sipxpbx2

         _sip._udp IN SRV 101 50 5060 sipxpbx1
         _sip._udp IN SRV 101 50 5060 sipxpbx2

   registrar The "forwardingrules.xml" for each forking proxy service
      specifies the registrar using an SRV name that maps first to the
      registrar instance on the same Server as the proxy (which is
      quicker to reach and more likely to be operational), and then to
      the registrar instance on the other Server (for failover).  The
      registrar service SRV records specify only TCP, because TCP has
      better failure detection and performance characteristics and
      compatibility with User Agents is not required.





Lawrence, et al.                                                [Page 3]

                               sipXpbx HA                  December 2005


        _sip._tcp.sipxregistrar1 IN SRV 1 50 5070 sipxpbx1
        _sip._tcp.sipxregistrar1 IN SRV 2 50 5070 sipxpbx2

        _sip._tcp.sipxregistrar2 IN SRV 1 50 5070 sipxpbx2
        _sip._tcp.sipxregistrar2 IN SRV 2 50 5070 sipxpbx1

      In the example above, the forking proxy on "sipxpbx1" would be
      configured to use "sipxregistrar1", which preferentially routes to
      "sipxpbx1:5070" and fails over to "sipxpbx2:5070".  The forking
      proxy on "sipxpbx2" is configured to use "sipxregistrar2", which
      uses the two Services in the reverse order.
   authproxy The "forwardingrules.xml" for each forking proxy service
      specifies the authorization proxy using a specialized SRV name
      configured similarly to the SRV name for the r