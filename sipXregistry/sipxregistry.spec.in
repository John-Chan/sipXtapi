Name:     @PACKAGE@
Version:  @VERSION@
Release:  %{buildno}

Summary:  SIP Registry/Redirect Server
License:  LGPL
Group:    Productivity/Telephony/SIP/Servers
Vendor:   SIPfoundry
Packager: SIPfoundry <sipx-dev@list.sipfoundry.org>
Url:      http://www.sipfoundry.org/sipXregistry

Source:   %name-%version.tar.gz

Requires: sipxcommserverlib >= 3.5

Prefix:    %_prefix
BuildRoot: %{_tmppath}/%name-%version-root

# should match sipXlib.m4:SIPX_UPGRADEDIR
%define upgrade_archive_dir %{_localstatedir}/sipxdata/upgrade
%define this_archive %{name}-%{version}-%{release}.tgz

%description
sipXregistry is the registry/redirect server component of the sipX family. 
It shares a number of common components with the rest of the family, but
can be used as a standalone server.

%package devel
Requires: %name
Group: Development/Libraries
Vendor: SIPfoundry
Summary: Internal documentation for %name 
Requires: sipxcommserverlib-devel >= 3.5

%description devel
Internal class documentation for the registry classes, and the include files that define
hook interfaces.

%prep
%setup -q

%build
%configure @CONFIGURE_OPTIONS@
cp config.log %name.configlog
make

%install

# makeinstall RPM macro doesn't leverage DESTDIR but instead overrides
# libdir, bindir, etc just for make install. This not copesetic w/how
# our makefiles are built, they'd rather preserve libdir, and use 
# DESTDIR when copying/moving/creating files.  The approach we're taking
# is quite standard, so it's surprising RPM's makeinstall macro is
# the way it is.
rm -rf $RPM_BUILD_ROOT
make DESTDIR=$RPM_BUILD_ROOT install

%define upgrade_archive_root ${RPM_BUILD_ROOT}%{upgrade_archive_dir}
mkdir -p %{upgrade_archive_root}
tar --directory ${RPM_BUILD_ROOT} \
    -czf %{upgrade_archive_root}/%{this_archive} \
    etc \
    var/sipxdata/sipdb

%clean
rm -rf $RPM_BUILD_ROOT

%files
%defattr(644,root,root,755)

%doc CONTRIBUTORS %name.configlog
%docdir doc
%attr(755,root,root) %{_bindir}/sipregistrar.sh
%attr(755,root,root) %{_bindir}/sipregistrar
%attr(755,root,root) %{_bindir}/%name-config
%attr(755,root,root) %{_libdir}/libRegistrarImpliedMWI.la
%attr(755,root,root) %{_libdir}/libRegistrarImpliedMWI.so*
%attr(755,root,root) %{_datadir}/sipx/schema/alias.xsd
%attr(755,root,root) %{_datadir}/sipx/schema/caller-alias.xsd
%attr(755,root,root) %{_datadir}/sipx/schema/huntgroup.xsd

# The configuration directory needs to be writeable becausen
# config files are generated from templates via config.defs
%dir %attr(755,@SIPXPBXUSER@,@SIPXPBXUSER@) %{_sysconfdir}/sipxpbx
%config(noreplace) %attr(644,@SIPXPBXUSER@,@SIPXPBXUSER@) %{_sysconfdir}/sipxpbx/mappingrules.xml.in
%config(noreplace) %attr(644,@SIPXPBXUSER@,@SIPXPBXUSER@) %{_sysconfdir}/sipxpbx/fallbackrules.xml.in
%config(noreplace) %attr(644,@SIPXPBXUSER@,@SIPXPBXUSER@) %{_sysconfdir}/sipxpbx/registrar-config.in
%{upgrade_archive_dir}/%{this_archive}
%{upgrade_archive_dir}/%{name}-previous.tgz

%files devel
%defattr(644,root,root,755)
%doc %{_datadir}/doc/sipx/%name/*
%attr(755,root,root) %{_libdir}/libRegistrarImpliedMWI.a
%{_includedir}/registry/*

%pre
sipx-upgrade -p sipxregistry -c

%post
sipx-upgrade -p sipxregistry -u --sdir %{_localstatedir} --cdir %{_sysconfdir}

%define current_archive %{upgrade_archive_dir}/%{name}-current.tgz
%define previous_archive %{upgrade_archive_dir}/%{name}-previous.tgz
if [ -f %{current_archive} ]; then
  mv %{current_archive} %{previous_archive}
fi
mv %{upgrade_archive_dir}/%{this_archive} %{current_archive}

pkg-upgrade --previous %{previous_archive} --current %{current_archive}
