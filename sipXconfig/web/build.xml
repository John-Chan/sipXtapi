<project name="web" default="default">
  <property name="test.src.dir" value="test" />
  <property name="checkstyle.severity" value="error" />
  <property name="project.dir" value="web" />
  <import file="../ant-targets.xml" />
  <property name="test.war" value="${test.classes.dir}/war" />
  <patternset id="test-ui.classes" includes="**/*TestUi.class" /> 

  <!-- 
            - common path unittests will need that interfaces w/sipxconfig lib 
            - all spring jars at this point
            -->
  <path id="compile.dependencies">
    <pathelement path="${sipxconfig.jar}" />
    <pathelement path="${spring.jar}" />
    <pathelement path="${hibernate.jar}" />
    <pathelement path="${servlet.jar}" />
    <pathelement path="${tapestry.jar}" />
    <pathelement path="${tapestry-contrib.jar}" />
    <pathelement path="${tapestry-checkboxes.jar}" />
    <pathelement path="${ognl.jar}" />
  </path>
  <!-- 
            - common path unittests will need that interfaces w/sipxconfig lib 
            - all spring jars at this point
            -->
  <path id="runtime.dependencies">
    <pathelement path="${aopalliance.jar}" />
    <pathelement path="${asm.jar}" />
    <pathelement path="${bsf.jar}" />
    <pathelement path="${cglib.jar}" />
    <pathelement path="${commons-beanutils.jar}" />
    <pathelement path="${commons-codec.jar}" />
    <pathelement path="${commons-collections.jar}" />
    <pathelement path="${c3p0.jar}" />
    <pathelement path="${commons-digester.jar}" />
    <pathelement path="${commons-fileupload.jar}" />
    <pathelement path="${commons-io.jar}" />
    <pathelement path="${commons-lang.jar}" />
    <pathelement path="${commons-logging.jar}" />
    <pathelement path="${commons-pool.jar}" />
    <pathelement path="${dom4j.jar}" />
    <pathelement path="${ehcache.jar}" />
    <pathelement path="${jakarta-oro.jar}" />
    <pathelement path="${jasper-compiler.jar}" />
    <pathelement path="${jasper-runtime.jar}" />
    <pathelement path="${javassist.jar}" />
    <pathelement path="${jaxen.jar}" />
    <pathelement path="${jdbc-driver.jar}" />
    <pathelement path="${jta.jar}" />
    <pathelement path="${log4j.jar}" />
    <pathelement path="${logkit.jar}" />
    <pathelement path="${odmg.jar}" />
    <pathelement path="${saxpath.jar}" />
    <pathelement path="${servlet.jsp.jar}" />
    <pathelement path="${velocity.jar}" />
    <pathelement path="${xerces.jar}" />
    <pathelement path="${xml-apis.jar}" />
    <pathelement path="${xmlrpc.jar}" />
    <pathelement path="${antlr.jar}" />
  	<!-- SOAP -->
  	<pathelement path="${xfire.jar}" />
  	<pathelement path="${xfire-spring.jar}" />
  	<pathelement path="${xfire-aegis.jar}" />
  	<pathelement path="${stax-api.jar}"/>
  	<pathelement path="${javamail.jar}"/>
  	<pathelement path="${yom.jar}"/>
  	<pathelement path="${wsdl4j.jar}"/>
  	<pathelement path="${stax-dev.jar}"/>
  </path>

  <path id="base.path">
    <path refid="compile.dependencies" />
    <!-- TODO: Separate these from compile dependencies -->
    <path refid="runtime.dependencies" />
    <!-- TEST -->
    <pathelement path="${commons-digester.jar}" />
    <pathelement path="${easymock.jar}" />
    <pathelement path="${httpunit.jar}" />
    <pathelement path="${jwebunit.jar}" />
    <pathelement path="${jetty.jar}" />
    <pathelement path="${servlet.jsp.jar}" />
    <pathelement path="${jasper-runtime.jar}" />
    <pathelement path="${jasper-compiler.jar}" />
    <pathelement path="${tidy.jar}" />
    <pathelement path="${commons-codec.jar}" />
  </path>
  <property name="classpath" refid="base.path" />

  <target name="init" depends="ant-targets.init">
    <mkdir dir="${dist.dir}/war-root" />
  </target>

  <!-- D E F A U L T -->
  <target name="default" depends="war" />

  <!-- W A R -->	
  <!-- FIXME: Remove dependency on compile.test -->	
  <target name="war" depends="compile,compile.test" 
    description="assemble sipxconfig for tapestry war">
  	<condition property="include.testpage">
  		<equals arg1="${debug}" arg2="on"/>
  	</condition>
    <war warfile="${sipxconfig.war}" webxml="context/WEB-INF/web.xml" 
      basedir="${dist.dir}/war-root">
      <!-- include assets:css/images -->
      <fileset dir="context">
        <include name="css/**/*" />
        <include name="images/**/*" />
      </fileset>
      <webinf dir="context/WEB-INF">
        <!-- avoid warning about already there -->
        <exclude name="web.xml" />
        <!-- exclude Test.page unless we debug -->
      	<present present="srconly" targetdir="${ant.1.4.1}/src/main"/>      	
        <exclude name="**/TestPage.*" unless="include.testpage"/>
      </webinf>
      <classes dir="${classes.dir}" />
      <classes dir="${src.dir}">
        <include name="**/*.xml" />
        <include name="**/*.properties" />
      </classes>
      <classes dir="etc">
        <include name="*.xml" />
        <include name="*.properties" />
      </classes>
    </war>
  </target>
		
  <target name="install" depends="war" 
    description="Copy war file into lib dir and web related configuration files">

    <!-- startup script -->
    <copy file="bin/sipxconfig.sh.in" 
      tofile="${dest.dir}${bin.dir}/sipxconfig.sh" />
    <replace file="${dest.dir}${bin.dir}/sipxconfig.sh" 
      propertyfile="${top.build.dir}/build.properties">
      <replacefilter token="@sipxpbx.conf.dir@" property="sipxpbx.conf.dir" />
      <replacefilter token="@sipxconfig.lib.dir@" property="sipxconfig.lib.dir" 
        />
      <replacefilter token="@sipxpbx.data.dir@" property="sipxpbx.data.dir" />
      <replacefilter token="@sipxpbx.log.dir@" property="sipxpbx.log.dir" />    	
      <replacefilter token="@bin.dir@" property="bin.dir" />
      <replacefilter token="@sipxpbx.run.dir@" property="sipxpbx.run.dir" />
      <replacefilter token="@sipxpbx.tmp.dir@" property="sipxpbx.tmp.dir" />
      <replacefilter token="@sipxpbx.user@" property="sipxpbx.user"/>
      <replacefilter token="@sipxconfig.db.user@" property="sipxconfig.db.user"/>
    </replace>
    <chmod file="${dest.dir}${bin.dir}/sipxconfig.sh" perm="ugo+x" />

    <mkdir dir="${dest.dir}${bin.dir}/ssl-cert"/>
    <copy file="bin/create-ssl-truststore.sh.in" 
      tofile="${dest.dir}${bin.dir}/ssl-cert/create-ssl-truststore.sh" />
    <replace file="${dest.dir}${bin.dir}/ssl-cert/create-ssl-truststore.sh" 
      propertyfile="${top.build.dir}/build.properties">
      <replacefilter token="@sipxpbx.user@" property="sipxpbx.user"/>
      <replacefilter token="@openssl@" property="openssl"/>
    </replace>
    <chmod file="${dest.dir}${bin.dir}/ssl-cert/create-ssl-truststore.sh" perm="ugo+x" />

    <copy file="bin/create-ssl-keystore.sh.in" 
      tofile="${dest.dir}${bin.dir}/ssl-cert/create-ssl-keystore.sh" />
    <replace file="${dest.dir}${bin.dir}/ssl-cert/create-ssl-keystore.sh" 
      propertyfile="${top.build.dir}/build.properties">
      <replacefilter token="@sipxpbx.conf.dir@" property="sipxpbx.conf.dir" />
      <replacefilter token="@sipxpbx.user@" property="sipxpbx.user"/>
      <replacefilter token="@sipxconfig.lib.dir@" property="sipxconfig.lib.dir"/>
      <replacefilter token="@openssl@" property="openssl"/>
    </replace>
    <chmod file="${dest.dir}${bin.dir}/ssl-cert/create-ssl-keystore.sh" perm="ugo+x" />

    <!-- config -->
    <mkdir dir="${dest.dir}${sipxpbx.conf.dir}" />
    <copy todir="${dest.dir}${sipxpbx.conf.dir}">
      <fileset dir="etc">
        <include name="sipxconfig-jetty.xml" />
      </fileset>
    </copy>
  	
    <copy todir="${dest.dir}${sipxpbx.data.dir}/lib">
      <fileset file="${sipxconfig.war}"/>
      <fileset file="${tapestry.jar}" />
      <fileset file="${tapestry-contrib.jar}" />
      <fileset file="${tapestry-checkboxes.jar}" />
      <fileset file="${ognl.jar}" />
      <!-- SOAP -->
      <fileset file="${xfire.jar}" />
      <fileset file="${xfire-spring.jar}" />
      <fileset file="${xfire-aegis.jar}" />
      <fileset file="${stax-api.jar}"/>
      <fileset file="${javamail.jar}"/>
      <fileset file="${yom.jar}"/>
      <fileset file="${wsdl4j.jar}"/>
      <fileset file="${stax-dev.jar}"/>
    </copy>
  </target>	
	
  <target name="run" depends="test-war" 
    description="Runs Jetty on current code, development purpose only">
    <java classname="org.sipfoundry.sipxconfig.site.JettyTestSetup" fork="true">
      <classpath refid="base.path" />
      <classpath refid="test.path" />
      <classpath location="${junit.jar}" />
      <classpath location="${log4j.jar}" />
      <sysproperty key="basedir" value="${basedir}" />
    </java>
  	<echo/>
    <echo>Web UI available at URL:</echo>
  	<echo>  http://localhost:9999/sipxconfig/app?service=page/TestPage</echo>
  	<echo/>
    <input>Press Enter/Return key to shutdown web server...</input>
  </target>
  <target name="test-all" depends="ant-targets.test-all,test-ui" />
  <target name="test-war" depends="default.deps,compile.test,war" 
    description="Creates a war file for unittests">
    <property name="test.systemRoot" 
      location="${test.results.dir}/artificial-system-root" />
    <delete dir="${test.war}" />
    <unwar src="${sipxconfig.war}" dest="${test.war}" />
    <!-- generates sipxconfig.properties that has test oriented values -->
    <java classname="org.sipfoundry.sipxconfig.site.SiteTestHelper" 
      failonerror="true">
      <sysproperty key="basedir" value="${basedir}" />
      <classpath path="${classpath}" />
      <classpath location="${junit.jar}" />
      <classpath refid="test.path" />
      <classpath location="${test.classes.dir}" />
      <arg value="${test.war}/WEB-INF/classes" />
      <arg value="${test.systemRoot}" />
      <arg value="${test.results.dir}" />
    </java>
    <copy todir="${test.systemRoot}/etc">
      <fileset dir="${top.dir}/neoconf/etc" />
    </copy>
  </target>

  <!-- 
    - U N I T T E S T   W E B   U I
    -->
  <target name="test-ui" depends="test-war" 
    description="run junit tests for web interface">
    <junit fork="yes" forkmode="perBatch" haltonfailure="no" printsummary="on" 
      failureproperty="junit.failed">
      <classpath refid="test.path" />
      <formatter type="plain" />
      <formatter type="xml" />
      <sysproperty key="basedir" value="${basedir}" />
      <batchtest todir="${junit.results.dir}">
        <fileset dir="${test.classes.dir}">
          <patternset refid="test-ui.classes" />
        </fileset>
      </batchtest>
    </junit>
    <fail if="junit.failed" />
  </target>
</project>
