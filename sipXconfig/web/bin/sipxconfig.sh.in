#!/bin/bash
#
# Copyright (C) 2004 SIPfoundry Inc.
# Licensed by SIPfoundry under the LGPL license.
#
# Copyright (C) 2004 Pingtel Corp.
# Licensed to SIPfoundry under a Contributor Agreement.


Action=RUN
Status=0
Args=""

# Declare script variables in a manner that unittest
# (or end user I suppose) can override
: ${SslDir:=@sipxpbx.conf.dir@/ssl}
: ${AuthoritiesDir:=$SslDir/authorities}
: ${JavaCmd:=`@bin.dir@/sipx-config --java`}
: ${ConfigDefs:=@sipxpbx.conf.dir@/config.defs}
: ${Configpp:=@bin.dir@/configpp}
: ${ConfigFiles:=@sipxpbx.conf.dir@/sipxconfig.properties @sipxpbx.conf.dir@/topology.xml}
: ${PidFile:=@sipxpbx.run.dir@/sipxconfig.pid}
: ${DatabaseProject:=@sipxpbx.conf.dir@/database/database.xml}
: ${LibDir:=@sipxconfig.lib.dir@}
: ${Psql:=psql}
: ${ServiceDir:=/etc/init.d}
: ${SubstituteUser:=su}
: ${Chown:=chown}
: ${LogDir:=@sipxpbx.log.dir@}

Database=SIPXCONFIG

# This function determines the correct service name for Postgres.
postgresService() {
    # If the user has already specified $Service, do not modify it.
    if test -n "$POSTGRES_SERVICE"
    then
        echo -e "$POSTGRES_SERVICE"
    fi
    
    if [ -f /etc/init.d/rhdb ]
    then
	    # Red Hat Enterprise uses the name rhdb.
        echo -e rhdb
    fi
    
    # Most other distributions use the name postgresql.
    echo -e postgresql
}

# Create copies for files that are capable of being restored to original (XCF-96)
makeRestoreBackup() {
  if [ ! -f $1.default ]; then
    cp $1 $1.default
  fi
}

# Search/replace variables used in config.defs into config files
runConfigpp() {
    
    # If the "config.defs" file exists and the <name>.in file exists for a
    # configuration file, then run the config preprocessor to generate the
    # fully resolved configuration file.
    if [ -f "$ConfigDefs" ]
    then
      for i in $ConfigFiles ; do
        if [ -f "${i}.in" ]
          then
            ${Configpp} --defs "${ConfigDefs}" --in "${i}.in" --out "$i"
          fi
      done
    fi
}

# Create a truststore of the same Certificate Authorities the
# other SIP servers use.
createAuthoritiesTruststore() {    
    # List of authorities accepted system-wide
    if [ -d $AuthoritiesDir ]
    then
      TrustStore=$SslDir/authorities.jks
      Certificates=`find $AuthoritiesDir | egrep -i '.(crt|crl)$'`
      @bin.dir@/ssl-cert/create-ssl-truststore.sh --checksum $SslDir/.authorities-contents.md5 --truststore $TrustStore  $Certificates
      # password on command line is not security issue. catrust and directory has appropriate
      # permissions, password is required by keystores
      TrustStoreOpts="\
	  -Djavax.net.ssl.trustStore=$TrustStore \
	  -Djavax.net.ssl.trustStoreType=JKS \
	  -Djavax.net.ssl.trustStorePassword=changeit"
    else
      # make empty as extra measure to ensure doesn't come from env. var
      # this is when Java's CA database has required certs
      TrustStoreOpts=""
    fi
}
    
# Take a list of files for directories complete with 
# and expand pathnames to create string for PATH based variables 
classpath() {
    Cpath=""
    for f in $@; do
      Cpath=$Cpath:$f
    done
    # trim first colon
    echo ${Cpath:1}
}

# Turn control over to ant to run database command
databaseCommand() {

    runConfigpp

    databaseCheck

    echo $$ > ${PidFile}

    Classpath=`classpath \
        @sipxpbx.conf.dir@ \
        ${LibDir}/*.jar`

    $JavaCmd \
        -classpath $Classpath \
        org.apache.tools.ant.launch.Launcher \
        -Dlib.dir=${LibDir} \
        -f ${DatabaseProject} \
        $@
}
    
# Run Web interface
onWebUi() {

    runConfigpp

    databaseCommand upgrade

    makeRestoreBackup @sipxpbx.conf.dir@/config.defs
    makeRestoreBackup @sipxpbx.conf.dir@/proxy-config.in
    makeRestoreBackup @sipxpbx.conf.dir@/registrar-config.in
    makeRestoreBackup @sipxpbx.conf.dir@/status-config.in
    makeRestoreBackup @sipxpbx.conf.dir@/authproxy-config.in

    createAuthoritiesTruststore
    
    JavaOpts="-server $SIPXCONFIG_OPTS"

    # Used in sipxconfig-jetty.xml only
    SystemProps="\
        -Djetty.lib.dir=@sipxconfig.lib.dir@ \
        -Djetty.log.dir=${LogDir} \
        -Dorg.apache.commons.logging.LogFactory=org.mortbay.log.Factory"

    Classpath=`classpath \
        @sipxpbx.conf.dir@ \
        ${LibDir}/*.jar`

    echo $$ > ${PidFile}
    
    exec $JavaCmd \
	    $SystemProps \
	    $JavaOpts \
	    $TrustStoreOpts \
	    -classpath "$Classpath" \
	    org.mortbay.jetty.Server @sipxpbx.conf.dir@/sipxconfig-jetty.xml
}

# return false if postgres is 
#  1. not running 
#  2. running but not setup to communicate w/java or ${Psql} command
#  3. Database is not created
databaseCheck() {
    if ! ${Psql} -l -U postgres | grep "${Database}" >/dev/null
    then        
        return 1
    else
        return 0
    fi
}

# Called after installation or upgrade by distro's package infrastructure
# but can be called manually and is harmless if called mulitple times.
onSetup() {
   if ! databaseCheck
   then
       postgresSetup
       setPostgresRunlevels
       databaseCommand create
   fi
}

# Configure postgres to accept TCP connections for communication
# from Java
postgresSetup() {

  # Set up the server.
  Service=`postgresService`
  ${ServiceDir}/${Service} stop >2 /dev/null

  # Custom
  if test -z $PGDATA
  then
      # Debian/Gentoo
      if test -d /var/lib/postgresql/data
      then
          PGDATA=/var/lib/postgresql/data
      else
          # Redhat
          PGDATA=/var/lib/pgsql/data
      fi
  fi

  # Postgres db is initialized on startup on Redhat, but not on other
  # distros so unless we put a "if distro=rh"  we need to init here
  if [ ! -f $PGDATA/PG_VERSION ] || [ ! -d $PGDATA/base ]
  then
      $SubstituteUser - postgres -c "initdb --pgdata=$PGDATA"
  fi

  # Create back up file (possibly) requiring update
  if [ ! -f $PGDATA/pg_hba.conf-sipx.bak ]
  then
     cp $PGDATA/pg_hba.conf $PGDATA/pg_hba.conf.sipx.bak
  fi

  # Will allow this script to add user. Need to be listed before
  # other permission or it will not take affect
  if ! grep '^local *all *all *trust\b*$' $PGDATA/pg_hba.conf >/dev/null
  then
     echo "local all all trust" > $PGDATA/pg_hba.conf.tmp
     cat $PGDATA/pg_hba.conf >> $PGDATA/pg_hba.conf.tmp
     mv $PGDATA/pg_hba.conf.tmp $PGDATA/pg_hba.conf
  fi

  # Will allow jboss to connect. Need to be listed before
  # other permission or it will not take affect
  if ! grep '^host *all *all *127.0.0.1 *255.255.255.255 *trust\b*$' $PGDATA/pg_hba.conf >/dev/null
  then
     echo "host all all 127.0.0.1 255.255.255.255 trust" > $PGDATA/pg_hba.conf.tmp
     cat $PGDATA/pg_hba.conf >> $PGDATA/pg_hba.conf.tmp
     mv $PGDATA/pg_hba.conf.tmp $PGDATA/pg_hba.conf
  fi

  # Open up tcpid connections
  sed -i-sipx.bak -e 's/\#tcpip_socket\s=\sfalse/tcpip_socket = true/g' \
          $PGDATA/postgresql.conf
  ${Chown} postgres:postgres $PGDATA/postgresql.conf

  # Postmaster to allow connections
  echo "-i" > $PGDATA/postmaster.opts.default
  chmod 664 $PGDATA/postmaster.opts.default
  ${Chown} postgres:postgres $PGDATA/postmaster.opts.default

  ${ServiceDir}/$Service start
}

# Have postgres start automatically with system reboot
setPostgresRunlevels() {
    # Arrange for Postgres to be started automatically in runlevels 3
    # and 5.
    # Check if we can use chkconfig.
    if [ -f /sbin/chkconfig ]
    then
        # We have to specify the runlevels because the default set of
        # runlevels for Postgres is empty.
        /sbin/chkconfig --level 35 $Service on
    else
        # The user will have to do it manually.
        echo chkconfig does not exist.
        echo You need to create /etc/rc?.d/{S85,K15}$Service
        echo to start postgres for runlevels 3 and 5.
    fi
}

# simple diagnostics
configtest() {
    # comment out until (benign?) xml errors are resolved
    @bin.dir@/sipx-validate-xml @sipxpbx.conf.dir@/topology.xml.in
    Status=$(($Status+$?))
}

while [ $# -ne 0 ]
do
    case ${1} in
        -c|--configtest)
            Action=CONFIGTEST
            ;;
            
        -s|--setup)
            Action=SETUP
            ;;

        -h|--help)
            Action=HELP
            ;;

        -d|--database)
            Action=DATABASE
            ;;    

        --nop)
            Action=NOP
            ;;

        *)
            Args="$Args $1"
            ;;
    esac           

    shift # always consume 1
done

if [ ${Action} = CONFIGTEST ]
then
    configtest
    exit $Status
elif [ ${Action} = DATABASE ] 
then
    databaseCommand $Args
elif [ ${Action} = RUN ] 
then
    onWebUi
elif [ ${Action} = SETUP ]
then
    onSetup
elif [ ${Action} = HELP ]
then

cat <<USAGE
Usage: sipxconfig.sh [-d|--database commands ...]
                     [-c|--configtest]
                     [-s|--setup]
                     [-h|--help]
                     
Start Web UI administration for sipXpbx and for remotely provision
SIP based phones.

Options include:

  none                 Runs web admin ui

  --database commands  Runs an operation on the database. Database commands 
                       are detailed below 

  --configtest         Run diagnostics

  --setup              Initialize postgresql for communicating with sipxconfig
                       and create initial database. Will most likely need 
                       root permissions.

Database commands include:

   drop                Drops ${Database} database

   create              Create new ${Database} database

   upgrade             Upgrade database from a previous version by applying
                       patches to the database schema.  This will only 
                       upgrade if nec.

   -p                  List all available commands

Notable environment variables:

    POSTGRES_SERVICE   a guess is made to determine the name for the
                       Postgres service.
                       If the guess incorrect, set this to the name of
                       the script in /etc/init.d that starts/stops
                       the Postgres database.  The possibilities that
                       we are aware of are "postgresql" and "rhdb".

USAGE

fi
