<!--
  - Manages the database creation, droping and upgrading. File is processed
  - by ANT and thus format compilies with ANT project files.
  -
  - How to add a database patch:
  -   1. add sql commands to a file called X in this directory, where X is any
  -      value you choose
  -   2. define a target X by copying a patch in section for the database version
  -      in defined at the top of schema.sql
  -   3. Add sql file reference to build.xml (this may go away)
  -
  - How to initialize tables beyond simple SQL.
  -   1. Add this to you SQL patch file
  -
  -       insert into initialization_task (name) values ('Z');
  - 
  -   2. Follow instruction in InitializationTask.java
  -->
<project name="database" basedir=".">
  <property name="sipxconfig.db.name" value="SIPXCONFIG"/>
  <property name="sipxconfig.db.user" value="postgres"/>
  <property name="sipxconfig.db.password" value=""/>
  <property name="sql.dir" location="${basedir}"/>
  <property name="sipxconfig.db.url" value="jdbc:postgresql://localhost/${sipxconfig.db.name}"/>
  
  <target name="patches">
      <!-- ANT BUG: sql task has issues when output=absolute file path -->
      <sipx-sql print="yes" output="patches.properties" showheaders="no">
        select name || '=true' from patch;
        select 'version' || version || '=true' from version_history;
      </sipx-sql>    
      <loadproperties srcfile="patches.properties"/>
  	  <delete file="patches.properties"/>  	  
  </target>
	
  <target name="tasks" description="sets flag if any initialization needs to be done">
    <sipx-sql print="yes" output="tasks.properties" showheaders="no">
      select 'initialize=true' from initialization_task having count(*) > 0;
    </sipx-sql>    
    <loadproperties srcfile="tasks.properties"/>
    <delete file="tasks.properties"/>
  </target>
	
  <target name="drop" description="drops database!">
    <exec executable="dropdb">
      <arg line="-U ${sipxconfig.db.user} ${sipxconfig.db.name}"/>
    </exec>    
  </target>

  <target name="createdb" description="creates database void of schema">
    <exec executable="createdb">
      <arg line="-U ${sipxconfig.db.user} --encoding=UNICODE ${sipxconfig.db.name}"/>
    </exec>
  </target>
  
  <target name="unittest-reset" depends="drop,createdb,schema,version0" 
    description="Resets database for unittesting"/>
  
  <!-- 
    - NOTE: Creating a database runs all the patches.  Before shipping, update schema.sql
    - then remove version0 from dependencies. 
    -->
  <target name="create" depends="createdb,schema,patches,version0,initialize"
    description="create database with schema">    
  </target>  

  <target name="upgrade" description="applied all patched that need to be applied"
    depends="patches,version0,initialize"/>
    	
  <target name="initialize" depends="tasks" if="initialize">
  	<echo>initialize=${initialize}</echo>
    <java classname="org.sipfoundry.sipxconfig.admin.DataInitializer" output="/dev/null"/>
  </target>
	
  <target name="version0" description="upgrade from version 0" unless="version1"
    depends="initialization_task,user_groups,default-user-group" />	
  
  <target name="schema" unless="schema">
    <sipx-sql>
      <transaction src="${sql.dir}/schema.sql"/>
    </sipx-sql>
  </target>  
  
  <!-- 
     Migration Targets Legend
    
     version0 to version1 - development database to intial version, this can be deleted
                              when all patches are migrated into schema.sql because migration
                              will be solved by a separate process and we're not supporting
                              upgrading from a develepment database.
    -->	
   <!--
    - version0 patches
    -->
  <target name="initialization_task" unless="initialization_task">
    <db-patch patch="initialization_task"/>
  </target>
  <target name="user_groups" unless="user_groups">
    <db-patch patch="user_groups"/>
  </target>
  <target name="default-user-group" unless="default-user-group">
    <sipx-sql>
      	insert into initialization_task (name) values ('default-user-group');
    </sipx-sql>
  	<mark-patch-applied patch="default-user-group"/>
  </target>	  
  <!--
    - SUPPORT UTILITIES
    -->
  <!-- Run SQL on SIPXCONFIG database and update patch list if successful -->  
  <macrodef name="db-patch">
    <attribute name="patch"/>
    <sequential>
      <sipx-sql>
        <transaction src="${sql.dir}/@{patch}.sql"/>
      </sipx-sql>
      <mark-patch-applied patch="@{patch}"/>    
    </sequential>
  </macrodef>
      
  <!-- patch list as successful -->  
  <macrodef name="mark-patch-applied">
    <attribute name="patch"/>
    <sequential>
    <sipx-sql>
      insert into patch (name) values ('@{patch}');
    </sipx-sql>  
    <property name="@{patch}" value="true"/>
    </sequential>
  </macrodef>

  <!-- Run SQL on SIPXCONFIG database -->  
  <presetdef name="sipx-sql">
    <sql driver="org.postgresql.Driver" 
        url="${sipxconfig.db.url}" 
        userid="${sipxconfig.db.user}" 
        password="${sipxconfig.db.password}"
        classpath="${jdbc-driver.jar}"/>
  </presetdef>
  
</project>
